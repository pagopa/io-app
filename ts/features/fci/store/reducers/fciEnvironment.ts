import { getType } from "typesafe-actions";
import { Action } from "../../../../store/actions/types";
import { GlobalState } from "../../../../store/reducers/types";
import { fciClearStateRequest, fciEnvironmentSet } from "../actions";
import { EnvironmentEnum } from "../../../../../definitions/fci/Environment";

/**
 * Unknown environment value as initial state.
 * The autogenerated {@link EnvironmentEnum} does not contain a value for unknown.
 * We need to add it manually but we cannot add it to the autogenerated enum,
 * nor we can extend it.
 * Thus we can use a union type to add the unknown value in {@link FciEnvironmentState}.
 * This is needed because when we dispatch the action to request a signature detail
 * we still don't know the environment as it is contained in the response of
 * the attached saga.
 */
export enum EnvironmentEnumUnknown {
  "unknown" = "unknown"
}

export type FciEnvironmentState = EnvironmentEnum | EnvironmentEnumUnknown;

const initialState: FciEnvironmentState = EnvironmentEnumUnknown.unknown;

/**
 * Store download info for FCI document
 */
const fciEnvironmentReducer = (
  state: FciEnvironmentState = initialState,
  action: Action
): FciEnvironmentState => {
  switch (action.type) {
    case getType(fciEnvironmentSet):
      return action.payload;
    case getType(fciClearStateRequest):
      return initialState;
  }
  return state;
};

// Selectors
export const fciEnvironmentSelector = (
  state: GlobalState
): FciEnvironmentState => state.features.fci.environment;

export default fciEnvironmentReducer;
