import { getType } from "typesafe-actions";
import * as O from "fp-ts/lib/Option";
import { pipe } from "fp-ts/lib/function";
import { Action } from "../../../../store/actions/types";
import { GlobalState } from "../../../../store/reducers/types";
import { fciClearStateRequest, fciEnvironmentSet } from "../actions";
import { EnvironmentEnum } from "../../../../../definitions/fci/Environment";

/**
 * Unknown value const for FCI environment.
 * The autogenerated {@link EnvironmentEnum} does not contain a value for unknown.
 * We need to add it manually but we cannot add it to the autogenerated enum,
 * nor we can extend it.
 * This is needed because when we dispatch the action to request a signature detail
 * we still don't know the environment as it is contained in the response of the attached saga.
 * It's also used when we don't have the environment in the response due to an error.
 */
const UNKNOWN_VALUE = "unknown";

export type FciEnvironmentState = O.Option<EnvironmentEnum>;

const initialState: FciEnvironmentState = O.none;

/**
 * Store download info for FCI document
 */
const fciEnvironmentReducer = (
  state: FciEnvironmentState = initialState,
  action: Action
): FciEnvironmentState => {
  switch (action.type) {
    case getType(fciEnvironmentSet):
      return action.payload;
    case getType(fciClearStateRequest):
      return initialState;
  }
  return state;
};

/**
 * Select the FCI environment from the state.
 * @param state - the global state
 * @returns a string representing the FCI environment
 */
export const fciEnvironmentSelector = (state: GlobalState) =>
  pipe(
    state.features.fci.environment,
    O.getOrElse(() => UNKNOWN_VALUE)
  );

export default fciEnvironmentReducer;
