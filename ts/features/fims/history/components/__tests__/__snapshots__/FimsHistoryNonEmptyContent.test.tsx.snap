// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 0 accesses, historyLoading = false and historyExporting = false  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={27}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={0}
                          contentWidth={0}
                          data={[]}
                          dataProvider={
                            DataProvider {
                              "_data": [],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 0,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 0,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 0,
                                    "width": 0,
                                  }
                                }
                                windowSize={0}
                              />
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              />
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                      <View
                        style={
                          [
                            {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                        testID="export-footer"
                      >
                        <View
                          pointerEvents="none"
                          style={
                            [
                              {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Richiedi una copia via email"
                            accessibilityRole="button"
                            accessibilityState={
                              {
                                "busy": false,
                                "checked": undefined,
                                "disabled": false,
                                "expanded": undefined,
                                "selected": undefined,
                              }
                            }
                            accessibilityValue={
                              {
                                "max": undefined,
                                "min": undefined,
                                "now": undefined,
                                "text": undefined,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={{}}
                            testID="export-button"
                          >
                            <View
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  {
                                    "backgroundColor": "#0073E6",
                                    "overflow": "hidden",
                                  },
                                  false,
                                  {
                                    "height": 40,
                                  },
                                  {},
                                  false,
                                  {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                style={
                                  [
                                    {
                                      "alignItems": "center",
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                    },
                                    {
                                      "columnGap": 8,
                                    },
                                    false,
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={true}
                                  ellipsizeMode="tail"
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.5}
                                  numberOfLines={1}
                                  style={
                                    [
                                      {},
                                      {
                                        "color": "#FFFFFF",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 16,
                                        "fontStyle": "normal",
                                        "fontWeight": "600",
                                        "lineHeight": 20,
                                      },
                                      {
                                        "alignSelf": "center",
                                      },
                                    ]
                                  }
                                >
                                  Richiedi una copia via email
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 0 accesses, historyLoading = false and historyExporting = true  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={19}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={0}
                          contentWidth={0}
                          data={[]}
                          dataProvider={
                            DataProvider {
                              "_data": [],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 0,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 0,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 0,
                                    "width": 0,
                                  }
                                }
                                windowSize={0}
                              />
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              />
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                      <View
                        style={
                          [
                            {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                        testID="export-footer"
                      >
                        <View
                          pointerEvents="none"
                          style={
                            [
                              {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Richiedi una copia via email"
                            accessibilityRole="button"
                            accessibilityState={
                              {
                                "busy": true,
                                "checked": undefined,
                                "disabled": false,
                                "expanded": undefined,
                                "selected": undefined,
                              }
                            }
                            accessibilityValue={
                              {
                                "max": undefined,
                                "min": undefined,
                                "now": undefined,
                                "text": undefined,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={{}}
                            testID="export-button"
                          >
                            <View
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  {
                                    "backgroundColor": "#0073E6",
                                    "overflow": "hidden",
                                  },
                                  false,
                                  {
                                    "height": 40,
                                  },
                                  {},
                                  false,
                                  {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                exiting={[Function]}
                                style={
                                  {
                                    "alignItems": "center",
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                  }
                                }
                              >
                                <View
                                  accessibilityRole="progressbar"
                                  accessible={true}
                                  importantForAccessibility="no-hide-descendants"
                                  style={
                                    {
                                      "height": 24,
                                      "width": 24,
                                    }
                                  }
                                  testID="LoadingSpinnerTestID"
                                >
                                  <View
                                    collapsable={false}
                                    style={
                                      {
                                        "transform": [
                                          {
                                            "rotateZ": "0deg",
                                          },
                                        ],
                                      }
                                    }
                                    testID="LoadingSpinnerAnimatedTestID"
                                  >
                                    <RNSVGSvgView
                                      align="xMidYMid"
                                      bbHeight={24}
                                      bbWidth={24}
                                      fill="none"
                                      focusable={false}
                                      height={24}
                                      meetOrSlice={0}
                                      minX={0}
                                      minY={0}
                                      style={
                                        [
                                          {
                                            "backgroundColor": "transparent",
                                            "borderWidth": 0,
                                          },
                                          {
                                            "flex": 0,
                                            "height": 24,
                                            "width": 24,
                                          },
                                        ]
                                      }
                                      vbHeight={24}
                                      vbWidth={24}
                                      width={24}
                                    >
                                      <RNSVGGroup
                                        fill={null}
                                        propList={
                                          [
                                            "fill",
                                          ]
                                        }
                                      >
                                        <RNSVGDefs>
                                          <RNSVGLinearGradient
                                            gradient={
                                              [
                                                0,
                                                16777215,
                                                1,
                                                -1,
                                              ]
                                            }
                                            gradientTransform={null}
                                            gradientUnits={0}
                                            name="spinner-secondHalf"
                                            x1="0%"
                                            x2="100%"
                                            y1="0%"
                                            y2="0%"
                                          />
                                          <RNSVGLinearGradient
                                            gradient={
                                              [
                                                0,
                                                -1,
                                                1,
                                                -1,
                                              ]
                                            }
                                            gradientTransform={null}
                                            gradientUnits={0}
                                            name="spinner-firstHalf"
                                            x1="0%"
                                            x2="100%"
                                            y1="0%"
                                            y2="0%"
                                          />
                                        </RNSVGDefs>
                                        <RNSVGGroup
                                          fill={
                                            {
                                              "payload": 4278190080,
                                              "type": 0,
                                            }
                                          }
                                          propList={
                                            [
                                              "strokeWidth",
                                            ]
                                          }
                                          strokeWidth={3}
                                        >
                                          <RNSVGPath
                                            d="M 1.5 12 A 10.5 10.5 0 0 1 22.5 12"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "brushRef": "spinner-secondHalf",
                                                "type": 1,
                                              }
                                            }
                                          />
                                          <RNSVGPath
                                            d="M 22.5 12 A 10.5 10.5 0 0 1 1.5 12"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "brushRef": "spinner-firstHalf",
                                                "type": 1,
                                              }
                                            }
                                          />
                                          <RNSVGPath
                                            d="M 1.5 12 A 10.5 10.5 0 0 1 1.5 11.25"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                                "strokeLinecap",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "payload": 4294967295,
                                                "type": 0,
                                              }
                                            }
                                            strokeLinecap={1}
                                          />
                                        </RNSVGGroup>
                                      </RNSVGGroup>
                                    </RNSVGSvgView>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 0 accesses, historyLoading = true and historyExporting = false  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={12}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={0}
                          contentWidth={0}
                          data={[]}
                          dataProvider={
                            DataProvider {
                              "_data": [],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 0,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 0,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 0,
                                    "width": 0,
                                  }
                                }
                                windowSize={0}
                              />
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <Text
                                  testID="testing-footer"
                                >
                                  LOADING_FOOTER
                                </Text>
                              </CellContainer>
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 0 accesses, historyLoading = true and historyExporting = true  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={5}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={0}
                          contentWidth={0}
                          data={[]}
                          dataProvider={
                            DataProvider {
                              "_data": [],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 0,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 0,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 0,
                                    "width": 0,
                                  }
                                }
                                windowSize={0}
                              />
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <Text
                                  testID="testing-footer"
                                >
                                  LOADING_FOOTER
                                </Text>
                              </CellContainer>
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 1 accesses, historyLoading = false and historyExporting = false  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={23}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={117}
                          contentWidth={352}
                          data={
                            [
                              {
                                "id": "TESTING",
                                "redirect": {
                                  "display_name": "TESTING",
                                  "uri": "TESTING",
                                },
                                "service_id": "TESTING_SID",
                                "timestamp": 1970-01-01T00:00:00.000Z,
                              },
                            ]
                          }
                          dataProvider={
                            DataProvider {
                              "_data": [
                                {
                                  "id": "TESTING",
                                  "redirect": {
                                    "display_name": "TESTING",
                                    "uri": "TESTING",
                                  },
                                  "service_id": "TESTING_SID",
                                  "timestamp": 1970-01-01T00:00:00.000Z,
                                },
                              ],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 1,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [
                                  {
                                    "height": 117,
                                    "type": 0,
                                    "width": 352,
                                    "x": 0,
                                    "y": 0,
                                  },
                                ],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 117,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [
                                  {
                                    "id": "TESTING",
                                    "redirect": {
                                      "display_name": "TESTING",
                                      "uri": "TESTING",
                                    },
                                    "service_id": "TESTING_SID",
                                    "timestamp": 1970-01-01T00:00:00.000Z,
                                  },
                                ],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 117,
                                    "width": 352,
                                  }
                                }
                                windowSize={900}
                              >
                                <CellContainer
                                  index={0}
                                  onLayout={[Function]}
                                  style={
                                    {
                                      "alignItems": "stretch",
                                      "flexDirection": "column",
                                      "left": 0,
                                      "position": "absolute",
                                      "top": 0,
                                      "width": 352,
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "flexDirection": "column",
                                      }
                                    }
                                  >
                                    <Text>
                                      TESTING LIST ITEM FROM PICKER
                                    </Text>
                                  </View>
                                </CellContainer>
                              </AutoLayoutView>
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              />
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                      <View
                        style={
                          [
                            {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                        testID="export-footer"
                      >
                        <View
                          pointerEvents="none"
                          style={
                            [
                              {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Richiedi una copia via email"
                            accessibilityRole="button"
                            accessibilityState={
                              {
                                "busy": false,
                                "checked": undefined,
                                "disabled": false,
                                "expanded": undefined,
                                "selected": undefined,
                              }
                            }
                            accessibilityValue={
                              {
                                "max": undefined,
                                "min": undefined,
                                "now": undefined,
                                "text": undefined,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={{}}
                            testID="export-button"
                          >
                            <View
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  {
                                    "backgroundColor": "#0073E6",
                                    "overflow": "hidden",
                                  },
                                  false,
                                  {
                                    "height": 40,
                                  },
                                  {},
                                  false,
                                  {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                style={
                                  [
                                    {
                                      "alignItems": "center",
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                    },
                                    {
                                      "columnGap": 8,
                                    },
                                    false,
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={true}
                                  ellipsizeMode="tail"
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.5}
                                  numberOfLines={1}
                                  style={
                                    [
                                      {},
                                      {
                                        "color": "#FFFFFF",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 16,
                                        "fontStyle": "normal",
                                        "fontWeight": "600",
                                        "lineHeight": 20,
                                      },
                                      {
                                        "alignSelf": "center",
                                      },
                                    ]
                                  }
                                >
                                  Richiedi una copia via email
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 1 accesses, historyLoading = false and historyExporting = true  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={15}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={117}
                          contentWidth={352}
                          data={
                            [
                              {
                                "id": "TESTING",
                                "redirect": {
                                  "display_name": "TESTING",
                                  "uri": "TESTING",
                                },
                                "service_id": "TESTING_SID",
                                "timestamp": 1970-01-01T00:00:00.000Z,
                              },
                            ]
                          }
                          dataProvider={
                            DataProvider {
                              "_data": [
                                {
                                  "id": "TESTING",
                                  "redirect": {
                                    "display_name": "TESTING",
                                    "uri": "TESTING",
                                  },
                                  "service_id": "TESTING_SID",
                                  "timestamp": 1970-01-01T00:00:00.000Z,
                                },
                              ],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 1,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [
                                  {
                                    "height": 117,
                                    "type": 0,
                                    "width": 352,
                                    "x": 0,
                                    "y": 0,
                                  },
                                ],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 117,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [
                                  {
                                    "id": "TESTING",
                                    "redirect": {
                                      "display_name": "TESTING",
                                      "uri": "TESTING",
                                    },
                                    "service_id": "TESTING_SID",
                                    "timestamp": 1970-01-01T00:00:00.000Z,
                                  },
                                ],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 117,
                                    "width": 352,
                                  }
                                }
                                windowSize={900}
                              >
                                <CellContainer
                                  index={0}
                                  onLayout={[Function]}
                                  style={
                                    {
                                      "alignItems": "stretch",
                                      "flexDirection": "column",
                                      "left": 0,
                                      "position": "absolute",
                                      "top": 0,
                                      "width": 352,
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "flexDirection": "column",
                                      }
                                    }
                                  >
                                    <Text>
                                      TESTING LIST ITEM FROM PICKER
                                    </Text>
                                  </View>
                                </CellContainer>
                              </AutoLayoutView>
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              />
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                      <View
                        style={
                          [
                            {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                        testID="export-footer"
                      >
                        <View
                          pointerEvents="none"
                          style={
                            [
                              {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Richiedi una copia via email"
                            accessibilityRole="button"
                            accessibilityState={
                              {
                                "busy": true,
                                "checked": undefined,
                                "disabled": false,
                                "expanded": undefined,
                                "selected": undefined,
                              }
                            }
                            accessibilityValue={
                              {
                                "max": undefined,
                                "min": undefined,
                                "now": undefined,
                                "text": undefined,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={{}}
                            testID="export-button"
                          >
                            <View
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  {
                                    "backgroundColor": "#0073E6",
                                    "overflow": "hidden",
                                  },
                                  false,
                                  {
                                    "height": 40,
                                  },
                                  {},
                                  false,
                                  {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                exiting={[Function]}
                                style={
                                  {
                                    "alignItems": "center",
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                  }
                                }
                              >
                                <View
                                  accessibilityRole="progressbar"
                                  accessible={true}
                                  importantForAccessibility="no-hide-descendants"
                                  style={
                                    {
                                      "height": 24,
                                      "width": 24,
                                    }
                                  }
                                  testID="LoadingSpinnerTestID"
                                >
                                  <View
                                    collapsable={false}
                                    style={
                                      {
                                        "transform": [
                                          {
                                            "rotateZ": "0deg",
                                          },
                                        ],
                                      }
                                    }
                                    testID="LoadingSpinnerAnimatedTestID"
                                  >
                                    <RNSVGSvgView
                                      align="xMidYMid"
                                      bbHeight={24}
                                      bbWidth={24}
                                      fill="none"
                                      focusable={false}
                                      height={24}
                                      meetOrSlice={0}
                                      minX={0}
                                      minY={0}
                                      style={
                                        [
                                          {
                                            "backgroundColor": "transparent",
                                            "borderWidth": 0,
                                          },
                                          {
                                            "flex": 0,
                                            "height": 24,
                                            "width": 24,
                                          },
                                        ]
                                      }
                                      vbHeight={24}
                                      vbWidth={24}
                                      width={24}
                                    >
                                      <RNSVGGroup
                                        fill={null}
                                        propList={
                                          [
                                            "fill",
                                          ]
                                        }
                                      >
                                        <RNSVGDefs>
                                          <RNSVGLinearGradient
                                            gradient={
                                              [
                                                0,
                                                16777215,
                                                1,
                                                -1,
                                              ]
                                            }
                                            gradientTransform={null}
                                            gradientUnits={0}
                                            name="spinner-secondHalf"
                                            x1="0%"
                                            x2="100%"
                                            y1="0%"
                                            y2="0%"
                                          />
                                          <RNSVGLinearGradient
                                            gradient={
                                              [
                                                0,
                                                -1,
                                                1,
                                                -1,
                                              ]
                                            }
                                            gradientTransform={null}
                                            gradientUnits={0}
                                            name="spinner-firstHalf"
                                            x1="0%"
                                            x2="100%"
                                            y1="0%"
                                            y2="0%"
                                          />
                                        </RNSVGDefs>
                                        <RNSVGGroup
                                          fill={
                                            {
                                              "payload": 4278190080,
                                              "type": 0,
                                            }
                                          }
                                          propList={
                                            [
                                              "strokeWidth",
                                            ]
                                          }
                                          strokeWidth={3}
                                        >
                                          <RNSVGPath
                                            d="M 1.5 12 A 10.5 10.5 0 0 1 22.5 12"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "brushRef": "spinner-secondHalf",
                                                "type": 1,
                                              }
                                            }
                                          />
                                          <RNSVGPath
                                            d="M 22.5 12 A 10.5 10.5 0 0 1 1.5 12"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "brushRef": "spinner-firstHalf",
                                                "type": 1,
                                              }
                                            }
                                          />
                                          <RNSVGPath
                                            d="M 1.5 12 A 10.5 10.5 0 0 1 1.5 11.25"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                                "strokeLinecap",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "payload": 4294967295,
                                                "type": 0,
                                              }
                                            }
                                            strokeLinecap={1}
                                          />
                                        </RNSVGGroup>
                                      </RNSVGGroup>
                                    </RNSVGSvgView>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 1 accesses, historyLoading = true and historyExporting = false  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={8}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={117}
                          contentWidth={352}
                          data={
                            [
                              {
                                "id": "TESTING",
                                "redirect": {
                                  "display_name": "TESTING",
                                  "uri": "TESTING",
                                },
                                "service_id": "TESTING_SID",
                                "timestamp": 1970-01-01T00:00:00.000Z,
                              },
                            ]
                          }
                          dataProvider={
                            DataProvider {
                              "_data": [
                                {
                                  "id": "TESTING",
                                  "redirect": {
                                    "display_name": "TESTING",
                                    "uri": "TESTING",
                                  },
                                  "service_id": "TESTING_SID",
                                  "timestamp": 1970-01-01T00:00:00.000Z,
                                },
                              ],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 1,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [
                                  {
                                    "height": 117,
                                    "type": 0,
                                    "width": 352,
                                    "x": 0,
                                    "y": 0,
                                  },
                                ],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 117,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [
                                  {
                                    "id": "TESTING",
                                    "redirect": {
                                      "display_name": "TESTING",
                                      "uri": "TESTING",
                                    },
                                    "service_id": "TESTING_SID",
                                    "timestamp": 1970-01-01T00:00:00.000Z,
                                  },
                                ],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 117,
                                    "width": 352,
                                  }
                                }
                                windowSize={900}
                              >
                                <CellContainer
                                  index={0}
                                  onLayout={[Function]}
                                  style={
                                    {
                                      "alignItems": "stretch",
                                      "flexDirection": "column",
                                      "left": 0,
                                      "position": "absolute",
                                      "top": 0,
                                      "width": 352,
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "flexDirection": "column",
                                      }
                                    }
                                  >
                                    <Text>
                                      TESTING LIST ITEM FROM PICKER
                                    </Text>
                                  </View>
                                </CellContainer>
                              </AutoLayoutView>
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <Text
                                  testID="testing-footer"
                                >
                                  LOADING_FOOTER
                                </Text>
                              </CellContainer>
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                      <View
                        style={
                          [
                            {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                        testID="export-footer"
                      >
                        <View
                          pointerEvents="none"
                          style={
                            [
                              {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Richiedi una copia via email"
                            accessibilityRole="button"
                            accessibilityState={
                              {
                                "busy": false,
                                "checked": undefined,
                                "disabled": false,
                                "expanded": undefined,
                                "selected": undefined,
                              }
                            }
                            accessibilityValue={
                              {
                                "max": undefined,
                                "min": undefined,
                                "now": undefined,
                                "text": undefined,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={{}}
                            testID="export-button"
                          >
                            <View
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  {
                                    "backgroundColor": "#0073E6",
                                    "overflow": "hidden",
                                  },
                                  false,
                                  {
                                    "height": 40,
                                  },
                                  {},
                                  false,
                                  {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                style={
                                  [
                                    {
                                      "alignItems": "center",
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                    },
                                    {
                                      "columnGap": 8,
                                    },
                                    false,
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={true}
                                  ellipsizeMode="tail"
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.5}
                                  numberOfLines={1}
                                  style={
                                    [
                                      {},
                                      {
                                        "color": "#FFFFFF",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 16,
                                        "fontStyle": "normal",
                                        "fontWeight": "600",
                                        "lineHeight": 20,
                                      },
                                      {
                                        "alignSelf": "center",
                                      },
                                    ]
                                  }
                                >
                                  Richiedi una copia via email
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`fimsHistoryNonEmptyContent should fetch automatically to try and fill the list, and match snapshot for 1 accesses, historyLoading = true and historyExporting = true  1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  FIMS_HISTORY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                enabled={false}
                handlerTag={1}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "flex": 1,
                            "overflow": "hidden",
                          }
                        }
                      >
                        <RCTScrollView
                          ItemSeparatorComponent={[Function]}
                          ListFooterComponent={[Function]}
                          ListHeaderComponent={[Function]}
                          applyWindowCorrection={[Function]}
                          canChangeSize={true}
                          contentContainerStyle={
                            {
                              "backgroundColor": undefined,
                              "minHeight": 1,
                              "minWidth": 1,
                              "paddingLeft": 24,
                              "paddingRight": 24,
                            }
                          }
                          contentHeight={117}
                          contentWidth={352}
                          data={
                            [
                              {
                                "id": "TESTING",
                                "redirect": {
                                  "display_name": "TESTING",
                                  "uri": "TESTING",
                                },
                                "service_id": "TESTING_SID",
                                "timestamp": 1970-01-01T00:00:00.000Z,
                              },
                            ]
                          }
                          dataProvider={
                            DataProvider {
                              "_data": [
                                {
                                  "id": "TESTING",
                                  "redirect": {
                                    "display_name": "TESTING",
                                    "uri": "TESTING",
                                  },
                                  "service_id": "TESTING_SID",
                                  "timestamp": 1970-01-01T00:00:00.000Z,
                                },
                              ],
                              "_firstIndexToProcess": 0,
                              "_hasStableIds": true,
                              "_requiresDataChangeHandling": false,
                              "_size": 1,
                              "getStableId": [Function],
                              "rowHasChanged": [Function],
                            }
                          }
                          disableRecycling={false}
                          estimatedItemSize={117}
                          extendedState={{}}
                          externalScrollView={[Function]}
                          finalRenderAheadOffset={250}
                          forceNonDeterministicRendering={true}
                          horizontal={false}
                          initialOffset={0}
                          initialRenderIndex={0}
                          isHorizontal={false}
                          keyExtractor={[Function]}
                          layoutProvider={
                            GridLayoutProviderWithProps {
                              "_acceptableRelayoutDelta": 1,
                              "_getHeightOrWidth": [Function],
                              "_getLayoutTypeForIndex": [Function],
                              "_getSpan": [Function],
                              "_hasExpired": false,
                              "_isHorizontal": false,
                              "_lastLayoutManager": GridLayoutManager {
                                "_acceptableRelayoutDelta": 1,
                                "_getSpan": [Function],
                                "_isGridHorizontal": false,
                                "_isHorizontal": false,
                                "_layoutProvider": [Circular],
                                "_layouts": [
                                  {
                                    "height": 117,
                                    "type": 0,
                                    "width": 352,
                                    "x": 0,
                                    "y": 0,
                                  },
                                ],
                                "_maxSpan": 1,
                                "_renderWindowSize": {
                                  "height": 900,
                                  "width": 352,
                                },
                                "_totalHeight": 117,
                                "_totalWidth": 352,
                                "_window": {
                                  "height": 900,
                                  "width": 352,
                                },
                              },
                              "_maxSpan": 1,
                              "_renderWindowSize": {
                                "height": 900,
                                "width": 352,
                              },
                              "_setLayoutForType": [Function],
                              "_tempDim": {
                                "height": 0,
                                "width": 0,
                              },
                              "averageWindow": AverageWindow {
                                "currentAverage": 117,
                                "currentCount": 1,
                                "inputValues": [
                                  117,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                  ,
                                ],
                                "nextIndex": 1,
                              },
                              "defaultEstimatedItemSize": 100,
                              "layoutObject": {
                                "size": undefined,
                                "span": undefined,
                              },
                              "props": {
                                "ItemSeparatorComponent": [Function],
                                "ListFooterComponent": [Function],
                                "ListHeaderComponent": [Function],
                                "contentContainerStyle": {
                                  "paddingBottom": 0,
                                  "paddingHorizontal": 24,
                                },
                                "data": [
                                  {
                                    "id": "TESTING",
                                    "redirect": {
                                      "display_name": "TESTING",
                                      "uri": "TESTING",
                                    },
                                    "service_id": "TESTING_SID",
                                    "timestamp": 1970-01-01T00:00:00.000Z,
                                  },
                                ],
                                "estimatedItemSize": 117,
                                "keyExtractor": [Function],
                                "numColumns": 1,
                                "onEndReached": [MockFunction] {
                                  "calls": [
                                    [],
                                  ],
                                  "results": [
                                    {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "renderItem": [Function],
                              },
                              "renderWindowInsets": {
                                "height": 0,
                                "width": -48,
                              },
                              "shouldRefreshWithAnchoring": true,
                            }
                          }
                          maxRenderAhead={750}
                          numColumns={1}
                          onEndReached={[Function]}
                          onEndReachedThreshold={0}
                          onEndReachedThresholdRelative={0}
                          onItemLayout={[Function]}
                          onLayout={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onSizeChanged={[Function]}
                          onVisibleIndicesChanged={[Function]}
                          removeClippedSubviews={false}
                          renderAheadOffset={0}
                          renderAheadStep={250}
                          renderContentContainer={[Function]}
                          renderItem={[Function]}
                          renderItemContainer={[Function]}
                          rowRenderer={[Function]}
                          scrollEventThrottle={16}
                          scrollThrottle={16}
                          scrollViewProps={
                            {
                              "contentContainerStyle": {
                                "backgroundColor": undefined,
                                "minHeight": 1,
                                "minWidth": 1,
                                "paddingLeft": 24,
                                "paddingRight": 24,
                              },
                              "onLayout": [Function],
                              "onScrollBeginDrag": [Function],
                              "refreshControl": undefined,
                              "style": {
                                "minHeight": 1,
                                "minWidth": 1,
                              },
                            }
                          }
                          style={
                            {
                              "minHeight": 1,
                              "minWidth": 1,
                            }
                          }
                          suppressBoundedSizeException={true}
                          windowCorrectionConfig={
                            {
                              "applyToInitialOffset": true,
                              "applyToItemScroll": true,
                              "value": {
                                "endCorrection": 0,
                                "startCorrection": 0,
                                "windowShift": -1,
                              },
                            }
                          }
                        >
                          <View>
                            <View
                              style={
                                {
                                  "flexDirection": "column",
                                }
                              }
                            >
                              <View
                                style={
                                  {
                                    "paddingLeft": 24,
                                    "paddingTop": 0,
                                  }
                                }
                              />
                              <View
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View>
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="title1"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#0E0F13",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 28,
                                          "fontStyle": "normal",
                                          "fontWeight": "600",
                                          "lineHeight": 34,
                                        },
                                      ]
                                    }
                                  >
                                    I tuoi accessi a servizi di terze parti
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                  <Text
                                    allowFontScaling={true}
                                    dynamicTypeRamp="body"
                                    maxFontSizeMultiplier={1.5}
                                    style={
                                      [
                                        {},
                                        {
                                          "color": "#555C70",
                                          "fontFamily": "Titillium Sans Pro",
                                          "fontSize": 16,
                                          "fontStyle": "normal",
                                          "fontWeight": "400",
                                          "lineHeight": 24,
                                        },
                                      ]
                                    }
                                  >
                                    Qui puoi consultare le cronologia dei tuoi accessi a servizi esterni tramite IO e richiederne una copia via email.
                                  </Text>
                                  <View
                                    style={
                                      {
                                        "height": 16,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                              <AutoLayoutView
                                enableInstrumentation={false}
                                horizontal={false}
                                onBlankAreaEvent={[Function]}
                                onLayout={[Function]}
                                renderAheadOffset={0}
                                scrollOffset={0}
                                style={
                                  {
                                    "height": 117,
                                    "width": 352,
                                  }
                                }
                                windowSize={900}
                              >
                                <CellContainer
                                  index={0}
                                  onLayout={[Function]}
                                  style={
                                    {
                                      "alignItems": "stretch",
                                      "flexDirection": "column",
                                      "left": 0,
                                      "position": "absolute",
                                      "top": 0,
                                      "width": 352,
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "flexDirection": "column",
                                      }
                                    }
                                  >
                                    <Text>
                                      TESTING LIST ITEM FROM PICKER
                                    </Text>
                                  </View>
                                </CellContainer>
                              </AutoLayoutView>
                              <CellContainer
                                index={-1}
                                style={
                                  [
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <Text
                                  testID="testing-footer"
                                >
                                  LOADING_FOOTER
                                </Text>
                              </CellContainer>
                              <View
                                style={
                                  {
                                    "paddingBottom": 0,
                                    "paddingRight": 24,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                      <View
                        style={
                          [
                            {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                        testID="export-footer"
                      >
                        <View
                          pointerEvents="none"
                          style={
                            [
                              {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Richiedi una copia via email"
                            accessibilityRole="button"
                            accessibilityState={
                              {
                                "busy": true,
                                "checked": undefined,
                                "disabled": false,
                                "expanded": undefined,
                                "selected": undefined,
                              }
                            }
                            accessibilityValue={
                              {
                                "max": undefined,
                                "min": undefined,
                                "now": undefined,
                                "text": undefined,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={{}}
                            testID="export-button"
                          >
                            <View
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  {
                                    "backgroundColor": "#0073E6",
                                    "overflow": "hidden",
                                  },
                                  false,
                                  {
                                    "height": 40,
                                  },
                                  {},
                                  false,
                                  {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                exiting={[Function]}
                                style={
                                  {
                                    "alignItems": "center",
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                  }
                                }
                              >
                                <View
                                  accessibilityRole="progressbar"
                                  accessible={true}
                                  importantForAccessibility="no-hide-descendants"
                                  style={
                                    {
                                      "height": 24,
                                      "width": 24,
                                    }
                                  }
                                  testID="LoadingSpinnerTestID"
                                >
                                  <View
                                    collapsable={false}
                                    style={
                                      {
                                        "transform": [
                                          {
                                            "rotateZ": "0deg",
                                          },
                                        ],
                                      }
                                    }
                                    testID="LoadingSpinnerAnimatedTestID"
                                  >
                                    <RNSVGSvgView
                                      align="xMidYMid"
                                      bbHeight={24}
                                      bbWidth={24}
                                      fill="none"
                                      focusable={false}
                                      height={24}
                                      meetOrSlice={0}
                                      minX={0}
                                      minY={0}
                                      style={
                                        [
                                          {
                                            "backgroundColor": "transparent",
                                            "borderWidth": 0,
                                          },
                                          {
                                            "flex": 0,
                                            "height": 24,
                                            "width": 24,
                                          },
                                        ]
                                      }
                                      vbHeight={24}
                                      vbWidth={24}
                                      width={24}
                                    >
                                      <RNSVGGroup
                                        fill={null}
                                        propList={
                                          [
                                            "fill",
                                          ]
                                        }
                                      >
                                        <RNSVGDefs>
                                          <RNSVGLinearGradient
                                            gradient={
                                              [
                                                0,
                                                16777215,
                                                1,
                                                -1,
                                              ]
                                            }
                                            gradientTransform={null}
                                            gradientUnits={0}
                                            name="spinner-secondHalf"
                                            x1="0%"
                                            x2="100%"
                                            y1="0%"
                                            y2="0%"
                                          />
                                          <RNSVGLinearGradient
                                            gradient={
                                              [
                                                0,
                                                -1,
                                                1,
                                                -1,
                                              ]
                                            }
                                            gradientTransform={null}
                                            gradientUnits={0}
                                            name="spinner-firstHalf"
                                            x1="0%"
                                            x2="100%"
                                            y1="0%"
                                            y2="0%"
                                          />
                                        </RNSVGDefs>
                                        <RNSVGGroup
                                          fill={
                                            {
                                              "payload": 4278190080,
                                              "type": 0,
                                            }
                                          }
                                          propList={
                                            [
                                              "strokeWidth",
                                            ]
                                          }
                                          strokeWidth={3}
                                        >
                                          <RNSVGPath
                                            d="M 1.5 12 A 10.5 10.5 0 0 1 22.5 12"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "brushRef": "spinner-secondHalf",
                                                "type": 1,
                                              }
                                            }
                                          />
                                          <RNSVGPath
                                            d="M 22.5 12 A 10.5 10.5 0 0 1 1.5 12"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "brushRef": "spinner-firstHalf",
                                                "type": 1,
                                              }
                                            }
                                          />
                                          <RNSVGPath
                                            d="M 1.5 12 A 10.5 10.5 0 0 1 1.5 11.25"
                                            fill={
                                              {
                                                "payload": 4278190080,
                                                "type": 0,
                                              }
                                            }
                                            propList={
                                              [
                                                "stroke",
                                                "strokeLinecap",
                                              ]
                                            }
                                            stroke={
                                              {
                                                "payload": 4294967295,
                                                "type": 0,
                                              }
                                            }
                                            strokeLinecap={1}
                                          />
                                        </RNSVGGroup>
                                      </RNSVGGroup>
                                    </RNSVGSvgView>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
