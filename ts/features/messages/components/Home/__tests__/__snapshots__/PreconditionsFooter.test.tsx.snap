// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PreconditionsFooter should match snapshot for 'content' footer category 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MESSAGES_HOME
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          activityState={2}
          collapsable={false}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={1}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Array [
                            Object {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            Object {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                      >
                        <View
                          pointerEvents="none"
                          style={
                            Array [
                              Object {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": Object {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            Object {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Continue"
                            accessibilityRole="button"
                            accessibilityState={
                              Object {
                                "busy": false,
                                "disabled": false,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={Object {}}
                            testID="message_preconditions_footer_continue"
                          >
                            <View
                              style={
                                Array [
                                  Object {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  Object {
                                    "overflow": "hidden",
                                  },
                                  false,
                                  Object {
                                    "height": 40,
                                  },
                                  Object {
                                    "backgroundColor": "#0073E6",
                                  },
                                  Object {
                                    "backgroundColor": undefined,
                                    "transform": Array [
                                      Object {
                                        "scale": undefined,
                                      },
                                    ],
                                  },
                                ]
                              }
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                    },
                                    false,
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={false}
                                  color="white"
                                  defaultColor="white"
                                  defaultWeight="Bold"
                                  ellipsizeMode="tail"
                                  font="TitilliumSansPro"
                                  fontStyle={
                                    Object {
                                      "fontSize": 16,
                                    }
                                  }
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.3}
                                  numberOfLines={1}
                                  style={
                                    Array [
                                      Object {
                                        "alignSelf": "center",
                                      },
                                      Object {
                                        "fontSize": 16,
                                      },
                                      Object {
                                        "color": "#FFFFFF",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontStyle": "normal",
                                        "fontWeight": "700",
                                      },
                                    ]
                                  }
                                  weight="Bold"
                                >
                                  Continue
                                </Text>
                              </View>
                            </View>
                          </View>
                          <View
                            style={
                              Object {
                                "alignSelf": "center",
                                "marginBottom": 0,
                              }
                            }
                          >
                            <View
                              style={
                                Object {
                                  "height": 16,
                                }
                              }
                            />
                            <View
                              accessibilityLabel="Cancel"
                              accessibilityRole="button"
                              accessibilityState={
                                Object {
                                  "disabled": false,
                                }
                              }
                              accessible={true}
                              collapsable={false}
                              focusable={true}
                              hitSlop={
                                Object {
                                  "bottom": 14,
                                  "left": 24,
                                  "right": 24,
                                  "top": 14,
                                }
                              }
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onResponderGrant={[Function]}
                              onResponderMove={[Function]}
                              onResponderRelease={[Function]}
                              onResponderTerminate={[Function]}
                              onResponderTerminationRequest={[Function]}
                              onStartShouldSetResponder={[Function]}
                              onTouchEnd={[Function]}
                              style={
                                Object {
                                  "alignSelf": "flex-start",
                                }
                              }
                              testID="message_preconditions_footer_cancel"
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "elevation": 0,
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                      "textAlignVertical": "center",
                                    },
                                    false,
                                    Object {},
                                    Object {
                                      "transform": Array [
                                        Object {
                                          "scale": undefined,
                                        },
                                      ],
                                    },
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={false}
                                  ellipsizeMode="tail"
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.3}
                                  numberOfLines={1}
                                  style={
                                    Array [
                                      Object {
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 16,
                                        "fontStyle": "normal",
                                        "fontWeight": "700",
                                      },
                                      Object {
                                        "color": "#0073E6",
                                      },
                                      Object {
                                        "color": undefined,
                                      },
                                    ]
                                  }
                                >
                                  Cancel
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`PreconditionsFooter should match snapshot for 'undefined' footer category 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MESSAGES_HOME
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          activityState={2}
          collapsable={false}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={4}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    />
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`PreconditionsFooter should match snapshot for 'update' footer category 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MESSAGES_HOME
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          activityState={2}
          collapsable={false}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={2}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Array [
                            Object {
                              "paddingBottom": 24,
                              "width": "100%",
                            },
                            Object {
                              "bottom": 0,
                              "position": "absolute",
                            },
                            false,
                            undefined,
                          ]
                        }
                      >
                        <View
                          pointerEvents="none"
                          style={
                            Array [
                              Object {
                                "backgroundColor": "#FFFFFF",
                                "bottom": 0,
                                "height": 4,
                                "position": "absolute",
                                "shadowColor": "#0E0F13",
                                "shadowOffset": Object {
                                  "height": -4,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.1,
                                "shadowRadius": 32,
                                "width": "100%",
                              },
                              undefined,
                            ]
                          }
                        />
                        <View
                          onLayout={[Function]}
                          pointerEvents="box-none"
                          style={
                            Object {
                              "flexShrink": 0,
                              "paddingHorizontal": 24,
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            accessibilityLabel="Update IO"
                            accessibilityRole="button"
                            accessibilityState={
                              Object {
                                "busy": false,
                                "disabled": false,
                              }
                            }
                            accessible={true}
                            collapsable={false}
                            focusable={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={Object {}}
                            testID="message_preconditions_footer_update"
                          >
                            <View
                              style={
                                Array [
                                  Object {
                                    "alignItems": "center",
                                    "borderRadius": 4,
                                    "elevation": 0,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 16,
                                    "textAlignVertical": "center",
                                  },
                                  Object {
                                    "overflow": "hidden",
                                  },
                                  false,
                                  Object {
                                    "height": 40,
                                  },
                                  Object {
                                    "backgroundColor": "#0073E6",
                                  },
                                  Object {
                                    "backgroundColor": undefined,
                                    "transform": Array [
                                      Object {
                                        "scale": undefined,
                                      },
                                    ],
                                  },
                                ]
                              }
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                    },
                                    false,
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={false}
                                  color="white"
                                  defaultColor="white"
                                  defaultWeight="Bold"
                                  ellipsizeMode="tail"
                                  font="TitilliumSansPro"
                                  fontStyle={
                                    Object {
                                      "fontSize": 16,
                                    }
                                  }
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.3}
                                  numberOfLines={1}
                                  style={
                                    Array [
                                      Object {
                                        "alignSelf": "center",
                                      },
                                      Object {
                                        "fontSize": 16,
                                      },
                                      Object {
                                        "color": "#FFFFFF",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontStyle": "normal",
                                        "fontWeight": "700",
                                      },
                                    ]
                                  }
                                  weight="Bold"
                                >
                                  Update IO
                                </Text>
                              </View>
                            </View>
                          </View>
                          <View
                            style={
                              Object {
                                "alignSelf": "center",
                                "marginBottom": 0,
                              }
                            }
                          >
                            <View
                              style={
                                Object {
                                  "height": 16,
                                }
                              }
                            />
                            <View
                              accessibilityLabel="Cancel"
                              accessibilityRole="button"
                              accessibilityState={
                                Object {
                                  "disabled": false,
                                }
                              }
                              accessible={true}
                              collapsable={false}
                              focusable={true}
                              hitSlop={
                                Object {
                                  "bottom": 14,
                                  "left": 24,
                                  "right": 24,
                                  "top": 14,
                                }
                              }
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onResponderGrant={[Function]}
                              onResponderMove={[Function]}
                              onResponderRelease={[Function]}
                              onResponderTerminate={[Function]}
                              onResponderTerminationRequest={[Function]}
                              onStartShouldSetResponder={[Function]}
                              onTouchEnd={[Function]}
                              style={
                                Object {
                                  "alignSelf": "flex-start",
                                }
                              }
                              testID="message_preconditions_footer_update_cancel"
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "elevation": 0,
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                      "textAlignVertical": "center",
                                    },
                                    false,
                                    Object {},
                                    Object {
                                      "transform": Array [
                                        Object {
                                          "scale": undefined,
                                        },
                                      ],
                                    },
                                  ]
                                }
                              >
                                <Text
                                  accessibilityElementsHidden={true}
                                  accessible={false}
                                  allowFontScaling={false}
                                  ellipsizeMode="tail"
                                  importantForAccessibility="no-hide-descendants"
                                  maxFontSizeMultiplier={1.3}
                                  numberOfLines={1}
                                  style={
                                    Array [
                                      Object {
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 16,
                                        "fontStyle": "normal",
                                        "fontWeight": "700",
                                      },
                                      Object {
                                        "color": "#0073E6",
                                      },
                                      Object {
                                        "color": undefined,
                                      },
                                    ]
                                  }
                                >
                                  Cancel
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`PreconditionsFooter should match snapshot for 'view' footer category 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MESSAGES_HOME
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          activityState={2}
          collapsable={false}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={3}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View />
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
