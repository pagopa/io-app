// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageDetailsAttachmentItem Should match snapshot when is fetching the attachment 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  DUMMY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                handlerTag={4}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        accessible={false}
                        style={
                          [
                            {
                              "alignItems": "center",
                              "borderColor": "#E8EBF1",
                              "borderCurve": "continuous",
                              "borderRadius": 8,
                              "borderWidth": 1,
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "paddingHorizontal": 16,
                              "paddingVertical": 16,
                            },
                            {
                              "borderColor": "#E8EBF1",
                              "opacity": 1,
                            },
                          ]
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "columnGap": 8,
                              "display": "flex",
                              "flexDirection": "row",
                            }
                          }
                        >
                          <View
                            style={
                              {
                                "alignItems": "flex-start",
                                "display": "flex",
                                "flexDirection": "column",
                                "flexGrow": 1,
                                "flexShrink": 1,
                                "rowGap": 4,
                              }
                            }
                          >
                            <Text
                              allowFontScaling={false}
                              dynamicTypeRamp="footnote"
                              maxFontSizeMultiplier={1.25}
                              numberOfLines={2}
                              style={
                                [
                                  {},
                                  {
                                    "color": "#0B3EE3",
                                    "fontFamily": "Titillium Sans Pro",
                                    "fontSize": 16,
                                    "fontStyle": "normal",
                                    "fontWeight": "600",
                                    "lineHeight": 21,
                                  },
                                ]
                              }
                            >
                              1
                            </Text>
                            <View
                              accessible={true}
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderCurve": "continuous",
                                    "borderRadius": 24,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 8,
                                    "paddingVertical": 4,
                                  },
                                  {
                                    "backgroundColor": "#F4F5F8",
                                  },
                                ]
                              }
                            >
                              <Text
                                allowFontScaling={false}
                                ellipsizeMode="tail"
                                maxFontSizeMultiplier={1.25}
                                numberOfLines={1}
                                style={
                                  [
                                    {},
                                    {
                                      "color": "#555C70",
                                      "fontFamily": "Titillium Sans Pro",
                                      "fontSize": 12,
                                      "fontStyle": "normal",
                                      "fontWeight": "600",
                                      "lineHeight": 16,
                                    },
                                    {
                                      "alignSelf": "center",
                                      "flexShrink": 1,
                                      "letterSpacing": 0.5,
                                      "textTransform": "uppercase",
                                    },
                                  ]
                                }
                              >
                                PDF
                              </Text>
                            </View>
                          </View>
                          <View
                            accessibilityRole="progressbar"
                            accessible={true}
                            importantForAccessibility="no-hide-descendants"
                            style={
                              {
                                "height": 24,
                                "width": 24,
                              }
                            }
                            testID="LoadingSpinnerTestID"
                          >
                            <View
                              collapsable={false}
                              style={
                                {
                                  "transform": [
                                    {
                                      "rotateZ": "0deg",
                                    },
                                  ],
                                }
                              }
                              testID="LoadingSpinnerAnimatedTestID"
                            >
                              <RNSVGSvgView
                                align="xMidYMid"
                                bbHeight={24}
                                bbWidth={24}
                                fill="none"
                                focusable={false}
                                height={24}
                                meetOrSlice={0}
                                minX={0}
                                minY={0}
                                style={
                                  [
                                    {
                                      "backgroundColor": "transparent",
                                      "borderWidth": 0,
                                    },
                                    {
                                      "flex": 0,
                                      "height": 24,
                                      "width": 24,
                                    },
                                  ]
                                }
                                vbHeight={24}
                                vbWidth={24}
                                width={24}
                              >
                                <RNSVGGroup
                                  fill={null}
                                  propList={
                                    [
                                      "fill",
                                    ]
                                  }
                                >
                                  <RNSVGDefs>
                                    <RNSVGLinearGradient
                                      gradient={
                                        [
                                          0,
                                          736995,
                                          1,
                                          -16040221,
                                        ]
                                      }
                                      gradientTransform={null}
                                      gradientUnits={0}
                                      name="spinner-secondHalf"
                                      x1="0%"
                                      x2="100%"
                                      y1="0%"
                                      y2="0%"
                                    />
                                    <RNSVGLinearGradient
                                      gradient={
                                        [
                                          0,
                                          -16040221,
                                          1,
                                          -16040221,
                                        ]
                                      }
                                      gradientTransform={null}
                                      gradientUnits={0}
                                      name="spinner-firstHalf"
                                      x1="0%"
                                      x2="100%"
                                      y1="0%"
                                      y2="0%"
                                    />
                                  </RNSVGDefs>
                                  <RNSVGGroup
                                    fill={
                                      {
                                        "payload": 4278190080,
                                        "type": 0,
                                      }
                                    }
                                    propList={
                                      [
                                        "strokeWidth",
                                      ]
                                    }
                                    strokeWidth={3}
                                  >
                                    <RNSVGPath
                                      d="M 1.5 12 A 10.5 10.5 0 0 1 22.5 12"
                                      fill={
                                        {
                                          "payload": 4278190080,
                                          "type": 0,
                                        }
                                      }
                                      propList={
                                        [
                                          "stroke",
                                        ]
                                      }
                                      stroke={
                                        {
                                          "brushRef": "spinner-secondHalf",
                                          "type": 1,
                                        }
                                      }
                                    />
                                    <RNSVGPath
                                      d="M 22.5 12 A 10.5 10.5 0 0 1 1.5 12"
                                      fill={
                                        {
                                          "payload": 4278190080,
                                          "type": 0,
                                        }
                                      }
                                      propList={
                                        [
                                          "stroke",
                                        ]
                                      }
                                      stroke={
                                        {
                                          "brushRef": "spinner-firstHalf",
                                          "type": 1,
                                        }
                                      }
                                    />
                                    <RNSVGPath
                                      d="M 1.5 12 A 10.5 10.5 0 0 1 1.5 11.25"
                                      fill={
                                        {
                                          "payload": 4278190080,
                                          "type": 0,
                                        }
                                      }
                                      propList={
                                        [
                                          "stroke",
                                          "strokeLinecap",
                                        ]
                                      }
                                      stroke={
                                        {
                                          "payload": 4278927075,
                                          "type": 0,
                                        }
                                      }
                                      strokeLinecap={1}
                                    />
                                  </RNSVGGroup>
                                </RNSVGGroup>
                              </RNSVGSvgView>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`MessageDetailsAttachmentItem Should match snapshot when the attachment has no name 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  DUMMY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                handlerTag={3}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        accessibilityHint="pdf"
                        accessibilityLabel="1"
                        accessibilityRole="button"
                        accessibilityState={
                          {
                            "busy": undefined,
                            "checked": undefined,
                            "disabled": undefined,
                            "expanded": undefined,
                            "selected": undefined,
                          }
                        }
                        accessibilityValue={
                          {
                            "max": undefined,
                            "min": undefined,
                            "now": undefined,
                            "text": undefined,
                          }
                        }
                        accessible={true}
                        collapsable={false}
                        focusable={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        onTouchEnd={[Function]}
                      >
                        <View
                          style={
                            [
                              {
                                "alignItems": "center",
                                "borderColor": "#E8EBF1",
                                "borderCurve": "continuous",
                                "borderRadius": 8,
                                "borderWidth": 1,
                                "flexDirection": "row",
                                "justifyContent": "space-between",
                                "paddingHorizontal": 16,
                                "paddingVertical": 16,
                              },
                              {
                                "borderColor": "#E8EBF1",
                              },
                              false,
                              {
                                "transform": [
                                  {
                                    "scale": undefined,
                                  },
                                ],
                              },
                            ]
                          }
                        >
                          <View
                            style={
                              {
                                "alignItems": "center",
                                "columnGap": 8,
                                "display": "flex",
                                "flexDirection": "row",
                              }
                            }
                          >
                            <View
                              style={
                                {
                                  "alignItems": "flex-start",
                                  "display": "flex",
                                  "flexDirection": "column",
                                  "flexGrow": 1,
                                  "flexShrink": 1,
                                  "rowGap": 4,
                                }
                              }
                            >
                              <Text
                                allowFontScaling={false}
                                dynamicTypeRamp="footnote"
                                maxFontSizeMultiplier={1.25}
                                numberOfLines={2}
                                style={
                                  [
                                    {},
                                    {
                                      "color": "#0B3EE3",
                                      "fontFamily": "Titillium Sans Pro",
                                      "fontSize": 16,
                                      "fontStyle": "normal",
                                      "fontWeight": "600",
                                      "lineHeight": 21,
                                    },
                                  ]
                                }
                              >
                                1
                              </Text>
                              <View
                                accessible={true}
                                style={
                                  [
                                    {
                                      "alignItems": "center",
                                      "borderCurve": "continuous",
                                      "borderRadius": 24,
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                      "paddingHorizontal": 8,
                                      "paddingVertical": 4,
                                    },
                                    {
                                      "backgroundColor": "#F4F5F8",
                                    },
                                  ]
                                }
                              >
                                <Text
                                  allowFontScaling={false}
                                  ellipsizeMode="tail"
                                  maxFontSizeMultiplier={1.25}
                                  numberOfLines={1}
                                  style={
                                    [
                                      {},
                                      {
                                        "color": "#555C70",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 12,
                                        "fontStyle": "normal",
                                        "fontWeight": "600",
                                        "lineHeight": 16,
                                      },
                                      {
                                        "alignSelf": "center",
                                        "flexShrink": 1,
                                        "letterSpacing": 0.5,
                                        "textTransform": "uppercase",
                                      },
                                    ]
                                  }
                                >
                                  PDF
                                </Text>
                              </View>
                            </View>
                            <RNSVGSvgView
                              accessibilityElementsHidden={true}
                              accessibilityLabel=""
                              accessible={false}
                              align="xMidYMid"
                              bbHeight={24}
                              bbWidth={24}
                              focusable={false}
                              height={24}
                              importantForAccessibility="no-hide-descendants"
                              meetOrSlice={0}
                              minX={0}
                              minY={0}
                              style={
                                [
                                  {
                                    "backgroundColor": "transparent",
                                    "borderWidth": 0,
                                  },
                                  {
                                    "color": "#0B3EE3",
                                  },
                                  {
                                    "flex": 0,
                                    "height": 24,
                                    "width": 24,
                                  },
                                ]
                              }
                              tintColor="#0B3EE3"
                              vbHeight={24}
                              vbWidth={24}
                              width={24}
                            >
                              <RNSVGGroup
                                fill={
                                  {
                                    "payload": 4278190080,
                                    "type": 0,
                                  }
                                }
                              >
                                <RNSVGPath
                                  clipRule={0}
                                  d="M16.2929 5.29289c.3905-.39052 1.0237-.39052 1.4142 0l6 6.00001c.3905.3905.3905 1.0237 0 1.4142l-6 6c-.3905.3905-1.0237.3905-1.4142 0-.3905-.3905-.3905-1.0237 0-1.4142L21.5858 12l-5.2929-5.29289c-.3905-.39053-.3905-1.02369 0-1.41422Z"
                                  fill={
                                    {
                                      "type": 2,
                                    }
                                  }
                                  fillRule={0}
                                  propList={
                                    [
                                      "fill",
                                      "fillRule",
                                    ]
                                  }
                                />
                              </RNSVGGroup>
                            </RNSVGSvgView>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`MessageDetailsAttachmentItem Should match snapshot with all parameters 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  DUMMY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                handlerTag={2}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        accessible={false}
                        style={
                          [
                            {
                              "alignItems": "center",
                              "borderColor": "#E8EBF1",
                              "borderCurve": "continuous",
                              "borderRadius": 8,
                              "borderWidth": 1,
                              "flexDirection": "row",
                              "justifyContent": "space-between",
                              "paddingHorizontal": 16,
                              "paddingVertical": 16,
                            },
                            {
                              "borderColor": "#E8EBF1",
                              "opacity": 0.5,
                            },
                          ]
                        }
                      >
                        <View
                          style={
                            {
                              "alignItems": "center",
                              "columnGap": 8,
                              "display": "flex",
                              "flexDirection": "row",
                            }
                          }
                        >
                          <View
                            style={
                              {
                                "alignItems": "flex-start",
                                "display": "flex",
                                "flexDirection": "column",
                                "flexGrow": 1,
                                "flexShrink": 1,
                                "rowGap": 4,
                              }
                            }
                          >
                            <Text
                              allowFontScaling={false}
                              dynamicTypeRamp="footnote"
                              maxFontSizeMultiplier={1.25}
                              numberOfLines={2}
                              style={
                                [
                                  {},
                                  {
                                    "color": "#0B3EE3",
                                    "fontFamily": "Titillium Sans Pro",
                                    "fontSize": 16,
                                    "fontStyle": "normal",
                                    "fontWeight": "600",
                                    "lineHeight": 21,
                                  },
                                ]
                              }
                            >
                              A PDF File
                            </Text>
                            <View
                              accessible={true}
                              style={
                                [
                                  {
                                    "alignItems": "center",
                                    "borderCurve": "continuous",
                                    "borderRadius": 24,
                                    "flexDirection": "row",
                                    "justifyContent": "center",
                                    "paddingHorizontal": 8,
                                    "paddingVertical": 4,
                                  },
                                  {
                                    "backgroundColor": "#F4F5F8",
                                  },
                                ]
                              }
                            >
                              <Text
                                allowFontScaling={false}
                                ellipsizeMode="tail"
                                maxFontSizeMultiplier={1.25}
                                numberOfLines={1}
                                style={
                                  [
                                    {},
                                    {
                                      "color": "#555C70",
                                      "fontFamily": "Titillium Sans Pro",
                                      "fontSize": 12,
                                      "fontStyle": "normal",
                                      "fontWeight": "600",
                                      "lineHeight": 16,
                                    },
                                    {
                                      "alignSelf": "center",
                                      "flexShrink": 1,
                                      "letterSpacing": 0.5,
                                      "textTransform": "uppercase",
                                    },
                                  ]
                                }
                              >
                                PDF
                              </Text>
                            </View>
                          </View>
                          <RNSVGSvgView
                            accessibilityElementsHidden={true}
                            accessibilityLabel=""
                            accessible={false}
                            align="xMidYMid"
                            bbHeight={24}
                            bbWidth={24}
                            focusable={false}
                            height={24}
                            importantForAccessibility="no-hide-descendants"
                            meetOrSlice={0}
                            minX={0}
                            minY={0}
                            style={
                              [
                                {
                                  "backgroundColor": "transparent",
                                  "borderWidth": 0,
                                },
                                {
                                  "color": "#0B3EE3",
                                },
                                {
                                  "flex": 0,
                                  "height": 24,
                                  "width": 24,
                                },
                              ]
                            }
                            tintColor="#0B3EE3"
                            vbHeight={24}
                            vbWidth={24}
                            width={24}
                          >
                            <RNSVGGroup
                              fill={
                                {
                                  "payload": 4278190080,
                                  "type": 0,
                                }
                              }
                            >
                              <RNSVGPath
                                clipRule={0}
                                d="M16.2929 5.29289c.3905-.39052 1.0237-.39052 1.4142 0l6 6.00001c.3905.3905.3905 1.0237 0 1.4142l-6 6c-.3905.3905-1.0237.3905-1.4142 0-.3905-.3905-.3905-1.0237 0-1.4142L21.5858 12l-5.2929-5.29289c-.3905-.39053-.3905-1.02369 0-1.41422Z"
                                fill={
                                  {
                                    "type": 2,
                                  }
                                }
                                fillRule={0}
                                propList={
                                  [
                                    "fill",
                                    "fillRule",
                                  ]
                                }
                              />
                            </RNSVGGroup>
                          </RNSVGSvgView>
                        </View>
                      </View>
                      <View
                        style={
                          {
                            "height": 8,
                          }
                        }
                      />
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;

exports[`MessageDetailsAttachmentItem Should match snapshot with required parameters 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "#FFFFFF",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  DUMMY
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": undefined,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                handlerTag={1}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        accessibilityHint="pdf"
                        accessibilityLabel="A PDF File"
                        accessibilityRole="button"
                        accessibilityState={
                          {
                            "busy": undefined,
                            "checked": undefined,
                            "disabled": undefined,
                            "expanded": undefined,
                            "selected": undefined,
                          }
                        }
                        accessibilityValue={
                          {
                            "max": undefined,
                            "min": undefined,
                            "now": undefined,
                            "text": undefined,
                          }
                        }
                        accessible={true}
                        collapsable={false}
                        focusable={true}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        onTouchEnd={[Function]}
                      >
                        <View
                          style={
                            [
                              {
                                "alignItems": "center",
                                "borderColor": "#E8EBF1",
                                "borderCurve": "continuous",
                                "borderRadius": 8,
                                "borderWidth": 1,
                                "flexDirection": "row",
                                "justifyContent": "space-between",
                                "paddingHorizontal": 16,
                                "paddingVertical": 16,
                              },
                              {
                                "borderColor": "#E8EBF1",
                              },
                              false,
                              {
                                "transform": [
                                  {
                                    "scale": undefined,
                                  },
                                ],
                              },
                            ]
                          }
                        >
                          <View
                            style={
                              {
                                "alignItems": "center",
                                "columnGap": 8,
                                "display": "flex",
                                "flexDirection": "row",
                              }
                            }
                          >
                            <View
                              style={
                                {
                                  "alignItems": "flex-start",
                                  "display": "flex",
                                  "flexDirection": "column",
                                  "flexGrow": 1,
                                  "flexShrink": 1,
                                  "rowGap": 4,
                                }
                              }
                            >
                              <Text
                                allowFontScaling={false}
                                dynamicTypeRamp="footnote"
                                maxFontSizeMultiplier={1.25}
                                numberOfLines={2}
                                style={
                                  [
                                    {},
                                    {
                                      "color": "#0B3EE3",
                                      "fontFamily": "Titillium Sans Pro",
                                      "fontSize": 16,
                                      "fontStyle": "normal",
                                      "fontWeight": "600",
                                      "lineHeight": 21,
                                    },
                                  ]
                                }
                              >
                                A PDF File
                              </Text>
                              <View
                                accessible={true}
                                style={
                                  [
                                    {
                                      "alignItems": "center",
                                      "borderCurve": "continuous",
                                      "borderRadius": 24,
                                      "flexDirection": "row",
                                      "justifyContent": "center",
                                      "paddingHorizontal": 8,
                                      "paddingVertical": 4,
                                    },
                                    {
                                      "backgroundColor": "#F4F5F8",
                                    },
                                  ]
                                }
                              >
                                <Text
                                  allowFontScaling={false}
                                  ellipsizeMode="tail"
                                  maxFontSizeMultiplier={1.25}
                                  numberOfLines={1}
                                  style={
                                    [
                                      {},
                                      {
                                        "color": "#555C70",
                                        "fontFamily": "Titillium Sans Pro",
                                        "fontSize": 12,
                                        "fontStyle": "normal",
                                        "fontWeight": "600",
                                        "lineHeight": 16,
                                      },
                                      {
                                        "alignSelf": "center",
                                        "flexShrink": 1,
                                        "letterSpacing": 0.5,
                                        "textTransform": "uppercase",
                                      },
                                    ]
                                  }
                                >
                                  PDF
                                </Text>
                              </View>
                            </View>
                            <RNSVGSvgView
                              accessibilityElementsHidden={true}
                              accessibilityLabel=""
                              accessible={false}
                              align="xMidYMid"
                              bbHeight={24}
                              bbWidth={24}
                              focusable={false}
                              height={24}
                              importantForAccessibility="no-hide-descendants"
                              meetOrSlice={0}
                              minX={0}
                              minY={0}
                              style={
                                [
                                  {
                                    "backgroundColor": "transparent",
                                    "borderWidth": 0,
                                  },
                                  {
                                    "color": "#0B3EE3",
                                  },
                                  {
                                    "flex": 0,
                                    "height": 24,
                                    "width": 24,
                                  },
                                ]
                              }
                              tintColor="#0B3EE3"
                              vbHeight={24}
                              vbWidth={24}
                              width={24}
                            >
                              <RNSVGGroup
                                fill={
                                  {
                                    "payload": 4278190080,
                                    "type": 0,
                                  }
                                }
                              >
                                <RNSVGPath
                                  clipRule={0}
                                  d="M16.2929 5.29289c.3905-.39052 1.0237-.39052 1.4142 0l6 6.00001c.3905.3905.3905 1.0237 0 1.4142l-6 6c-.3905.3905-1.0237.3905-1.4142 0-.3905-.3905-.3905-1.0237 0-1.4142L21.5858 12l-5.2929-5.29289c-.3905-.39053-.3905-1.02369 0-1.41422Z"
                                  fill={
                                    {
                                      "type": 2,
                                    }
                                  }
                                  fillRule={0}
                                  propList={
                                    [
                                      "fill",
                                      "fillRule",
                                    ]
                                  }
                                />
                              </RNSVGGroup>
                            </RNSVGSvgView>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
