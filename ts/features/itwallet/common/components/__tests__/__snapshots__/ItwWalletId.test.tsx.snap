// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ItwWalletId should match snapshot when PID status is "jwtExpired" 1`] = `
<View
  style={
    [
      {
        "height": 56,
        "marginBottom": 16,
        "marginHorizontal": -8,
      },
      undefined,
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <skRRect
        height={0}
        r={8}
        width={0}
        x={0}
        y={0}
      >
        <skLinearGradient
          colors={
            [
              "#D5D5FF",
              "#CEE2FA",
            ]
          }
          end={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
          start={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
        />
      </skRRect>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 24,
        "paddingVertical": 16,
      }
    }
  >
    <View
      style={
        {
          "display": "flex",
          "flexDirection": "row",
          "gap": 8,
        }
      }
    >
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={24}
        bbWidth={24}
        color="#0B3EE3"
        focusable={false}
        height={24}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 24,
              "width": 24,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={24}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            d="m15.694 7.56-2.296-.656a6.276 6.276 0 0 1-4.337-4.337L8.405.271a.438.438 0 0 0-.81 0l-.656 2.296a6.276 6.276 0 0 1-4.337 4.337L.306 7.56a.421.421 0 0 0 0 .81l2.296.656a6.276 6.276 0 0 1 4.337 4.338l.656 2.295a.42.42 0 0 0 .81 0l.656-2.295a6.276 6.276 0 0 1 4.338-4.338l2.295-.656a.421.421 0 0 0 0-.81ZM23.809 18.719l-1.435-.41a3.922 3.922 0 0 1-2.71-2.711l-.41-1.435a.273.273 0 0 0-.507 0l-.41 1.435a3.923 3.923 0 0 1-2.711 2.71l-1.435.41a.263.263 0 0 0 0 .507l1.435.41a3.922 3.922 0 0 1 2.71 2.711l.41 1.435a.263.263 0 0 0 .507 0l.41-1.435a3.923 3.923 0 0 1 2.711-2.71l1.435-.41a.263.263 0 0 0 0-.507Z"
            fill={
              {
                "type": 2,
              }
            }
            propList={
              [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
      <Text
        allowFontScaling={true}
        dynamicTypeRamp="body"
        maxFontSizeMultiplier={1.5}
        style={
          [
            {},
            {
              "color": "#2B2E38",
              "fontFamily": "Titillio",
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "600",
              "lineHeight": 24,
            },
          ]
        }
      >
        IT-Wallet ID
      </Text>
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={16}
        bbWidth={16}
        color="#5D1313"
        focusable={false}
        height={16}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 16,
              "width": 16,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={16}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            clipRule={0}
            d="M7.00702 1c-.73494 0-1.41405.39209-1.78152 1.02856L.2756 11.0274c-.36747.6365-.36747 1.4206 0 2.0571l4.9499 8.8783c.36747.6365 1.04658 1.0286 1.78152 1.0286h9.94288c.7349 0 1.414-.3921 1.7815-1.0286l4.993-8.8783c.3675-.6365.3675-1.4206 0-2.0571l-4.993-8.99884C18.3639 1.39209 17.6848 1 16.9499 1H7.00702Zm5.02608 13.5549c.5676 0 1.0283-.4601 1.0283-1.0277V5.52583c0-.56758-.4601-1.02769-1.0277-1.02769-.5676 0-1.0282.46011-1.0282 1.02769v8.00137c0 .5676.4601 1.0277 1.0276 1.0277Zm0 1.9431c.8436 0 1.5275.6839 1.5275 1.5275 0 .8436-.6839 1.5275-1.5275 1.5275-.8436 0-1.5274-.6839-1.5274-1.5275 0-.8436.6838-1.5275 1.5274-1.5275Z"
            fill={
              {
                "type": 2,
              }
            }
            fillRule={0}
            propList={
              [
                "fill",
                "fillRule",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
    <View
      accessibilityLabel="Mostra"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": false,
          "checked": undefined,
          "disabled": false,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        {
          "bottom": 14,
          "left": 24,
          "right": 24,
          "top": 14,
        }
      }
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignSelf": "flex-start",
        }
      }
    >
      <View
        style={
          [
            {
              "alignItems": "center",
              "borderCurve": "continuous",
              "elevation": 0,
              "flexDirection": "row",
              "justifyContent": "center",
              "overflow": "hidden",
              "textAlignVertical": "center",
            },
            false,
            {},
            {
              "paddingHorizontal": 0,
            },
            {
              "backgroundColor": "transparent",
              "borderColor": "#0B3EE3",
              "borderRadius": 8,
              "borderWidth": 0,
              "height": undefined,
            },
            {},
          ]
        }
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              {
                "columnGap": 8,
              },
              false,
            ]
          }
        >
          <Text
            accessibilityElementsHidden={true}
            accessible={false}
            allowFontScaling={true}
            ellipsizeMode="tail"
            importantForAccessibility="no-hide-descendants"
            maxFontSizeMultiplier={1.5}
            numberOfLines={1}
            style={
              [
                {},
                {
                  "color": "#0E0F13",
                  "fontFamily": "Titillio",
                  "fontSize": 16,
                  "fontStyle": "normal",
                  "fontWeight": "600",
                  "lineHeight": 20,
                },
                [
                  {
                    "textAlign": "auto",
                  },
                  {
                    "color": "#0B3EE3",
                  },
                  {
                    "color": undefined,
                  },
                ],
              ]
            }
          >
            Mostra
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`ItwWalletId should match snapshot when PID status is "jwtExpiring" 1`] = `
<View
  style={
    [
      {
        "height": 56,
        "marginBottom": 16,
        "marginHorizontal": -8,
      },
      undefined,
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <skRRect
        height={0}
        r={8}
        width={0}
        x={0}
        y={0}
      >
        <skLinearGradient
          colors={
            [
              "#D5D5FF",
              "#CEE2FA",
            ]
          }
          end={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
          start={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
        />
      </skRRect>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 24,
        "paddingVertical": 16,
      }
    }
  >
    <View
      style={
        {
          "display": "flex",
          "flexDirection": "row",
          "gap": 8,
        }
      }
    >
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={24}
        bbWidth={24}
        color="#0B3EE3"
        focusable={false}
        height={24}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 24,
              "width": 24,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={24}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            d="m15.694 7.56-2.296-.656a6.276 6.276 0 0 1-4.337-4.337L8.405.271a.438.438 0 0 0-.81 0l-.656 2.296a6.276 6.276 0 0 1-4.337 4.337L.306 7.56a.421.421 0 0 0 0 .81l2.296.656a6.276 6.276 0 0 1 4.337 4.338l.656 2.295a.42.42 0 0 0 .81 0l.656-2.295a6.276 6.276 0 0 1 4.338-4.338l2.295-.656a.421.421 0 0 0 0-.81ZM23.809 18.719l-1.435-.41a3.922 3.922 0 0 1-2.71-2.711l-.41-1.435a.273.273 0 0 0-.507 0l-.41 1.435a3.923 3.923 0 0 1-2.711 2.71l-1.435.41a.263.263 0 0 0 0 .507l1.435.41a3.922 3.922 0 0 1 2.71 2.711l.41 1.435a.263.263 0 0 0 .507 0l.41-1.435a3.923 3.923 0 0 1 2.711-2.71l1.435-.41a.263.263 0 0 0 0-.507Z"
            fill={
              {
                "type": 2,
              }
            }
            propList={
              [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
      <Text
        allowFontScaling={true}
        dynamicTypeRamp="body"
        maxFontSizeMultiplier={1.5}
        style={
          [
            {},
            {
              "color": "#2B2E38",
              "fontFamily": "Titillio",
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "600",
              "lineHeight": 24,
            },
          ]
        }
      >
        IT-Wallet ID
      </Text>
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={16}
        bbWidth={16}
        color="#614C15"
        focusable={false}
        height={16}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 16,
              "width": 16,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={16}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            clipRule={0}
            d="m15.523 3.047 7.926 13.813c1.566 2.73-.392 6.14-3.523 6.14H4.074C.942 23-1.015 19.59.55 16.86L8.477 3.047c1.566-2.73 5.48-2.73 7.046 0Zm-3.495 13.458a1.528 1.528 0 1 1 0 3.056 1.528 1.528 0 0 1 0-3.056Zm0-1.944c.568 0 1.029-.46 1.029-1.028V5.528a1.028 1.028 0 0 0-2.057 0v8.005c0 .567.46 1.028 1.029 1.028Z"
            fill={
              {
                "type": 2,
              }
            }
            fillRule={0}
            propList={
              [
                "fill",
                "fillRule",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
    <View
      accessibilityLabel="Mostra"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": false,
          "checked": undefined,
          "disabled": false,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        {
          "bottom": 14,
          "left": 24,
          "right": 24,
          "top": 14,
        }
      }
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignSelf": "flex-start",
        }
      }
    >
      <View
        style={
          [
            {
              "alignItems": "center",
              "borderCurve": "continuous",
              "elevation": 0,
              "flexDirection": "row",
              "justifyContent": "center",
              "overflow": "hidden",
              "textAlignVertical": "center",
            },
            false,
            {},
            {
              "paddingHorizontal": 0,
            },
            {
              "backgroundColor": "transparent",
              "borderColor": "#0B3EE3",
              "borderRadius": 8,
              "borderWidth": 0,
              "height": undefined,
            },
            {},
          ]
        }
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              {
                "columnGap": 8,
              },
              false,
            ]
          }
        >
          <Text
            accessibilityElementsHidden={true}
            accessible={false}
            allowFontScaling={true}
            ellipsizeMode="tail"
            importantForAccessibility="no-hide-descendants"
            maxFontSizeMultiplier={1.5}
            numberOfLines={1}
            style={
              [
                {},
                {
                  "color": "#0E0F13",
                  "fontFamily": "Titillio",
                  "fontSize": 16,
                  "fontStyle": "normal",
                  "fontWeight": "600",
                  "lineHeight": 20,
                },
                [
                  {
                    "textAlign": "auto",
                  },
                  {
                    "color": "#0B3EE3",
                  },
                  {
                    "color": undefined,
                  },
                ],
              ]
            }
          >
            Mostra
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`ItwWalletId should match snapshot when PID status is "valid" 1`] = `
<View
  style={
    [
      {
        "height": 56,
        "marginBottom": 16,
        "marginHorizontal": -8,
      },
      undefined,
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <skRRect
        height={0}
        r={8}
        width={0}
        x={0}
        y={0}
      >
        <skLinearGradient
          colors={
            [
              "#D5D5FF",
              "#CEE2FA",
            ]
          }
          end={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
          start={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
        />
      </skRRect>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 24,
        "paddingVertical": 16,
      }
    }
  >
    <View
      style={
        {
          "display": "flex",
          "flexDirection": "row",
          "gap": 8,
        }
      }
    >
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={24}
        bbWidth={24}
        color="#0B3EE3"
        focusable={false}
        height={24}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 24,
              "width": 24,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={24}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            d="m15.694 7.56-2.296-.656a6.276 6.276 0 0 1-4.337-4.337L8.405.271a.438.438 0 0 0-.81 0l-.656 2.296a6.276 6.276 0 0 1-4.337 4.337L.306 7.56a.421.421 0 0 0 0 .81l2.296.656a6.276 6.276 0 0 1 4.337 4.338l.656 2.295a.42.42 0 0 0 .81 0l.656-2.295a6.276 6.276 0 0 1 4.338-4.338l2.295-.656a.421.421 0 0 0 0-.81ZM23.809 18.719l-1.435-.41a3.922 3.922 0 0 1-2.71-2.711l-.41-1.435a.273.273 0 0 0-.507 0l-.41 1.435a3.923 3.923 0 0 1-2.711 2.71l-1.435.41a.263.263 0 0 0 0 .507l1.435.41a3.922 3.922 0 0 1 2.71 2.711l.41 1.435a.263.263 0 0 0 .507 0l.41-1.435a3.923 3.923 0 0 1 2.711-2.71l1.435-.41a.263.263 0 0 0 0-.507Z"
            fill={
              {
                "type": 2,
              }
            }
            propList={
              [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
      <Text
        allowFontScaling={true}
        dynamicTypeRamp="body"
        maxFontSizeMultiplier={1.5}
        style={
          [
            {},
            {
              "color": "#2B2E38",
              "fontFamily": "Titillio",
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "600",
              "lineHeight": 24,
            },
          ]
        }
      >
        IT-Wallet ID
      </Text>
    </View>
    <View
      accessibilityLabel="Mostra"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": false,
          "checked": undefined,
          "disabled": false,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        {
          "bottom": 14,
          "left": 24,
          "right": 24,
          "top": 14,
        }
      }
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignSelf": "flex-start",
        }
      }
    >
      <View
        style={
          [
            {
              "alignItems": "center",
              "borderCurve": "continuous",
              "elevation": 0,
              "flexDirection": "row",
              "justifyContent": "center",
              "overflow": "hidden",
              "textAlignVertical": "center",
            },
            false,
            {},
            {
              "paddingHorizontal": 0,
            },
            {
              "backgroundColor": "transparent",
              "borderColor": "#0B3EE3",
              "borderRadius": 8,
              "borderWidth": 0,
              "height": undefined,
            },
            {},
          ]
        }
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              {
                "columnGap": 8,
              },
              false,
            ]
          }
        >
          <Text
            accessibilityElementsHidden={true}
            accessible={false}
            allowFontScaling={true}
            ellipsizeMode="tail"
            importantForAccessibility="no-hide-descendants"
            maxFontSizeMultiplier={1.5}
            numberOfLines={1}
            style={
              [
                {},
                {
                  "color": "#0E0F13",
                  "fontFamily": "Titillio",
                  "fontSize": 16,
                  "fontStyle": "normal",
                  "fontWeight": "600",
                  "lineHeight": 20,
                },
                [
                  {
                    "textAlign": "auto",
                  },
                  {
                    "color": "#0B3EE3",
                  },
                  {
                    "color": undefined,
                  },
                ],
              ]
            }
          >
            Mostra
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`ItwWalletId should match snapshot when isStacked prop is false 1`] = `
<View
  style={
    [
      {
        "height": 56,
        "marginBottom": 16,
        "marginHorizontal": -8,
      },
      false,
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <skRRect
        height={0}
        r={8}
        width={0}
        x={0}
        y={0}
      >
        <skLinearGradient
          colors={
            [
              "#D5D5FF",
              "#CEE2FA",
            ]
          }
          end={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
          start={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
        />
      </skRRect>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 24,
        "paddingVertical": 16,
      }
    }
  >
    <View
      style={
        {
          "display": "flex",
          "flexDirection": "row",
          "gap": 8,
        }
      }
    >
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={24}
        bbWidth={24}
        color="#0B3EE3"
        focusable={false}
        height={24}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 24,
              "width": 24,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={24}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            d="m15.694 7.56-2.296-.656a6.276 6.276 0 0 1-4.337-4.337L8.405.271a.438.438 0 0 0-.81 0l-.656 2.296a6.276 6.276 0 0 1-4.337 4.337L.306 7.56a.421.421 0 0 0 0 .81l2.296.656a6.276 6.276 0 0 1 4.337 4.338l.656 2.295a.42.42 0 0 0 .81 0l.656-2.295a6.276 6.276 0 0 1 4.338-4.338l2.295-.656a.421.421 0 0 0 0-.81ZM23.809 18.719l-1.435-.41a3.922 3.922 0 0 1-2.71-2.711l-.41-1.435a.273.273 0 0 0-.507 0l-.41 1.435a3.923 3.923 0 0 1-2.711 2.71l-1.435.41a.263.263 0 0 0 0 .507l1.435.41a3.922 3.922 0 0 1 2.71 2.711l.41 1.435a.263.263 0 0 0 .507 0l.41-1.435a3.923 3.923 0 0 1 2.711-2.71l1.435-.41a.263.263 0 0 0 0-.507Z"
            fill={
              {
                "type": 2,
              }
            }
            propList={
              [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
      <Text
        allowFontScaling={true}
        dynamicTypeRamp="body"
        maxFontSizeMultiplier={1.5}
        style={
          [
            {},
            {
              "color": "#2B2E38",
              "fontFamily": "Titillio",
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "600",
              "lineHeight": 24,
            },
          ]
        }
      >
        IT-Wallet ID
      </Text>
    </View>
    <View
      accessibilityLabel="Mostra"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": false,
          "checked": undefined,
          "disabled": false,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        {
          "bottom": 14,
          "left": 24,
          "right": 24,
          "top": 14,
        }
      }
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignSelf": "flex-start",
        }
      }
    >
      <View
        style={
          [
            {
              "alignItems": "center",
              "borderCurve": "continuous",
              "elevation": 0,
              "flexDirection": "row",
              "justifyContent": "center",
              "overflow": "hidden",
              "textAlignVertical": "center",
            },
            false,
            {},
            {
              "paddingHorizontal": 0,
            },
            {
              "backgroundColor": "transparent",
              "borderColor": "#0B3EE3",
              "borderRadius": 8,
              "borderWidth": 0,
              "height": undefined,
            },
            {},
          ]
        }
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              {
                "columnGap": 8,
              },
              false,
            ]
          }
        >
          <Text
            accessibilityElementsHidden={true}
            accessible={false}
            allowFontScaling={true}
            ellipsizeMode="tail"
            importantForAccessibility="no-hide-descendants"
            maxFontSizeMultiplier={1.5}
            numberOfLines={1}
            style={
              [
                {},
                {
                  "color": "#0E0F13",
                  "fontFamily": "Titillio",
                  "fontSize": 16,
                  "fontStyle": "normal",
                  "fontWeight": "600",
                  "lineHeight": 20,
                },
                [
                  {
                    "textAlign": "auto",
                  },
                  {
                    "color": "#0B3EE3",
                  },
                  {
                    "color": undefined,
                  },
                ],
              ]
            }
          >
            Mostra
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`ItwWalletId should match snapshot when isStacked prop is true 1`] = `
<View
  style={
    [
      {
        "height": 56,
        "marginBottom": 16,
        "marginHorizontal": -8,
      },
      {
        "height": 96,
        "marginBottom": -40,
      },
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <skRRect
        height={0}
        r={8}
        width={0}
        x={0}
        y={0}
      >
        <skLinearGradient
          colors={
            [
              "#D5D5FF",
              "#CEE2FA",
            ]
          }
          end={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
          start={
            JsiSkPoint {
              "CanvasKit": {
                "MakeBlendMode": [MockFunction],
                "MakeCanvas": [MockFunction],
                "MakeColor": [MockFunction],
                "MakeColorFilter": [MockFunction],
                "MakeFont": [MockFunction],
                "MakeImage": [MockFunction],
                "MakeImageFilter": [MockFunction],
                "MakeManagedAnimation": [MockFunction],
                "MakeMatrix": [MockFunction],
                "MakePaint": [MockFunction],
                "MakePath": [MockFunction],
                "MakePicture": [MockFunction],
                "MakeRuntimeEffect": [MockFunction],
                "MakeShader": [MockFunction],
                "MakeSkottieAnimation": [MockFunction],
                "MakeTextBlob": [MockFunction],
                "MakeTypeface": [MockFunction],
                "MakeVertices": [MockFunction],
              },
              "__typename__": "Point",
              "dispose": [Function],
              "ref": Float32Array [
                0,
                0,
              ],
            }
          }
        />
      </skRRect>
    </View>
  </View>
  <View
    style={
      {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 24,
        "paddingVertical": 16,
      }
    }
  >
    <View
      style={
        {
          "display": "flex",
          "flexDirection": "row",
          "gap": 8,
        }
      }
    >
      <RNSVGSvgView
        accessibilityElementsHidden={true}
        accessibilityLabel=""
        accessible={false}
        align="xMidYMid"
        bbHeight={24}
        bbWidth={24}
        color="#0B3EE3"
        focusable={false}
        height={24}
        importantForAccessibility="no-hide-descendants"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 24,
              "width": 24,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={24}
      >
        <RNSVGGroup
          fill={
            {
              "payload": 4278190080,
              "type": 0,
            }
          }
        >
          <RNSVGPath
            d="m15.694 7.56-2.296-.656a6.276 6.276 0 0 1-4.337-4.337L8.405.271a.438.438 0 0 0-.81 0l-.656 2.296a6.276 6.276 0 0 1-4.337 4.337L.306 7.56a.421.421 0 0 0 0 .81l2.296.656a6.276 6.276 0 0 1 4.337 4.338l.656 2.295a.42.42 0 0 0 .81 0l.656-2.295a6.276 6.276 0 0 1 4.338-4.338l2.295-.656a.421.421 0 0 0 0-.81ZM23.809 18.719l-1.435-.41a3.922 3.922 0 0 1-2.71-2.711l-.41-1.435a.273.273 0 0 0-.507 0l-.41 1.435a3.923 3.923 0 0 1-2.711 2.71l-1.435.41a.263.263 0 0 0 0 .507l1.435.41a3.922 3.922 0 0 1 2.71 2.711l.41 1.435a.263.263 0 0 0 .507 0l.41-1.435a3.923 3.923 0 0 1 2.711-2.71l1.435-.41a.263.263 0 0 0 0-.507Z"
            fill={
              {
                "type": 2,
              }
            }
            propList={
              [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
      <Text
        allowFontScaling={true}
        dynamicTypeRamp="body"
        maxFontSizeMultiplier={1.5}
        style={
          [
            {},
            {
              "color": "#2B2E38",
              "fontFamily": "Titillio",
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "600",
              "lineHeight": 24,
            },
          ]
        }
      >
        IT-Wallet ID
      </Text>
    </View>
    <View
      accessibilityLabel="Mostra"
      accessibilityRole="button"
      accessibilityState={
        {
          "busy": false,
          "checked": undefined,
          "disabled": false,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        {
          "bottom": 14,
          "left": 24,
          "right": 24,
          "top": 14,
        }
      }
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "alignSelf": "flex-start",
        }
      }
    >
      <View
        style={
          [
            {
              "alignItems": "center",
              "borderCurve": "continuous",
              "elevation": 0,
              "flexDirection": "row",
              "justifyContent": "center",
              "overflow": "hidden",
              "textAlignVertical": "center",
            },
            false,
            {},
            {
              "paddingHorizontal": 0,
            },
            {
              "backgroundColor": "transparent",
              "borderColor": "#0B3EE3",
              "borderRadius": 8,
              "borderWidth": 0,
              "height": undefined,
            },
            {},
          ]
        }
      >
        <View
          style={
            [
              {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              },
              {
                "columnGap": 8,
              },
              false,
            ]
          }
        >
          <Text
            accessibilityElementsHidden={true}
            accessible={false}
            allowFontScaling={true}
            ellipsizeMode="tail"
            importantForAccessibility="no-hide-descendants"
            maxFontSizeMultiplier={1.5}
            numberOfLines={1}
            style={
              [
                {},
                {
                  "color": "#0E0F13",
                  "fontFamily": "Titillio",
                  "fontSize": 16,
                  "fontStyle": "normal",
                  "fontWeight": "600",
                  "lineHeight": 20,
                },
                [
                  {
                    "textAlign": "auto",
                  },
                  {
                    "color": "#0B3EE3",
                  },
                  {
                    "color": undefined,
                  },
                ],
              ]
            }
          >
            Mostra
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;
