import * as r from "@pagopa/ts-commons/lib/requests";
import {
  ApiHeaderJson,
  composeHeaderProducers,
  createFetchRequestForApi
} from "@pagopa/ts-commons/lib/requests";
import { ProblemJson } from "../../../../definitions/backend/ProblemJson";
import { UpsertPNActivationT } from "../../../../definitions/pn/requestTypes";
import { SessionToken } from "../../../types/SessionToken";
import { tokenHeaderProducer, withBearerToken } from "../../../utils/api";
import { defaultRetryingFetch } from "../../../utils/fetch";

// TODO: remove this once codegen has been updated (https://pagopa.atlassian.net/browse/IA-914)
//
// The default decoder generated by codegen has a bug that doesn't handle
// 204 with empty/undefined response (it always expects a JSON, so the decoding
// fails). This bug has been fixed in a recend codegen release, but for now
// we canno update it.
export function upsertPNActivationDecoderCustom() {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.constantResponseDecoder<undefined, 204>(204, undefined),
        r.ioResponseDecoder<
          400,
          typeof ProblemJson["_A"],
          typeof ProblemJson["_O"]
        >(400, ProblemJson)
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.ioResponseDecoder<
      500,
      typeof ProblemJson["_A"],
      typeof ProblemJson["_O"]
    >(500, ProblemJson)
  );
}

const upsertActivation: UpsertPNActivationT = {
  method: "post",
  url: _ => `/api/v1/pn/activation`,
  headers: composeHeaderProducers(tokenHeaderProducer, ApiHeaderJson),
  query: query => ({ isTest: query.isTest }),
  body: body => JSON.stringify(body.body),
  response_decoder: upsertPNActivationDecoderCustom()
};

// client for handling PN endpoints
export const BackendPnClient = (
  baseUrl: string,
  token: SessionToken,
  fetchApi: typeof fetch = defaultRetryingFetch()
) => {
  const options = {
    baseUrl,
    fetchApi
  };

  const withToken = withBearerToken(token);

  return {
    upsertPnActivation: withToken(
      createFetchRequestForApi(upsertActivation, options)
    )
  };
};

export type BackendPnClient = ReturnType<typeof BackendPnClient>;
