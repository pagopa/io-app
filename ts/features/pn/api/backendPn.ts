import {
  createFetchRequestForApi,
  ApiHeaderJson,
  composeHeaderProducers
} from "italia-ts-commons/lib/requests";
import * as r from "italia-ts-commons/lib/requests";
import { SessionToken } from "../../../types/SessionToken";
import { tokenHeaderProducer, withBearerToken } from "../../../utils/api";
import { defaultRetryingFetch } from "../../../utils/fetch";
import { ProblemJson } from "../../../../definitions/backend/ProblemJson";
import { UpsertPNActivationT } from "../../../../definitions/pn/requestTypes";

// The default decoder generated by codegen has a bug that doesn't handle
// 204 with empty/undefined response (it always expects a JSON, so the decoding
// fails). Even by patching codegen (https://pagopa.atlassian.net/browse/ICC-177)
// we won't be able to update it until we fix our technical debt, so for now we
// will handle this with a manual-generated decoder.
export function upsertPNActivationDecoderCustom() {
  return r.composeResponseDecoders(
    r.composeResponseDecoders(
      r.composeResponseDecoders(
        r.constantResponseDecoder<undefined, 204>(204, undefined),
        r.ioResponseDecoder<
          400,
          typeof ProblemJson["_A"],
          typeof ProblemJson["_O"]
        >(400, ProblemJson)
      ),
      r.constantResponseDecoder<undefined, 401>(401, undefined)
    ),
    r.ioResponseDecoder<
      500,
      typeof ProblemJson["_A"],
      typeof ProblemJson["_O"]
    >(500, ProblemJson)
  );
}

const upsertActivation: UpsertPNActivationT = {
  method: "post",
  url: _ => `/api/v1/pn/activation`,
  headers: composeHeaderProducers(tokenHeaderProducer, ApiHeaderJson),
  query: query => ({ isTest: query.isTest }),
  body: body => JSON.stringify(body.pNActivation),
  response_decoder: upsertPNActivationDecoderCustom()
};

// client for handling PN endpoints
export const BackendPnClient = (
  baseUrl: string,
  token: SessionToken,
  fetchApi: typeof fetch = defaultRetryingFetch()
) => {
  const options = {
    baseUrl,
    fetchApi
  };

  const withToken = withBearerToken(token);

  return {
    upsertPnActivation: withToken(
      createFetchRequestForApi(upsertActivation, options)
    )
  };
};

export type BackendPnClient = ReturnType<typeof BackendPnClient>;
