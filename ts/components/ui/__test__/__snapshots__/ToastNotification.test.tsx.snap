// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test ToastNotification component should match snapshot for props ({ message: 'Hello', icon: 'checkTick' }) 1`] = `
Object {
  "component": <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MAIN
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={1}
                handlerType="PanGestureHandler"
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  collapsable={false}
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            />
                            <View
                              accessibilityElementsHidden={false}
                              closing={false}
                              gestureVelocityImpact={0.3}
                              importantForAccessibility="auto"
                              onClose={[Function]}
                              onGestureBegin={[Function]}
                              onGestureCanceled={[Function]}
                              onGestureEnd={[Function]}
                              onOpen={[Function]}
                              onTransition={[Function]}
                              pointerEvents="box-none"
                              style={
                                Array [
                                  Object {
                                    "overflow": undefined,
                                  },
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  },
                                ]
                              }
                              transitionSpec={
                                Object {
                                  "close": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                  "open": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                }
                              }
                            >
                              <View
                                collapsable={false}
                                needsOffscreenAlphaCompositing={false}
                                pointerEvents="box-none"
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  forwardedRef={[Function]}
                                  handlerTag={2}
                                  handlerType="PanGestureHandler"
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  style={
                                    Object {
                                      "flex": 1,
                                      "transform": Array [
                                        Object {
                                          "translateX": 0,
                                        },
                                        Object {
                                          "translateX": 0,
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="none"
                                    style={
                                      Object {
                                        "backgroundColor": "#FFFFFF",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "shadowColor": "#000",
                                        "shadowOffset": Object {
                                          "height": 1,
                                          "width": -1,
                                        },
                                        "shadowOpacity": 0.3,
                                        "shadowRadius": 5,
                                        "top": 0,
                                        "width": 3,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      Array [
                                        Object {
                                          "flex": 1,
                                          "overflow": "hidden",
                                        },
                                        Array [
                                          Object {
                                            "backgroundColor": "#FFFFFF",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        Object {
                                          "flex": 1,
                                          "flexDirection": "column-reverse",
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Object {
                                            "flex": 1,
                                          }
                                        }
                                      >
                                        <View
                                          accessibilityLabel="Hello"
                                          accessibilityRole="alert"
                                          accessible={true}
                                          style={
                                            Array [
                                              Object {
                                                "alignItems": "center",
                                                "borderRadius": 8,
                                                "borderWidth": 1,
                                                "flexDirection": "row",
                                                "justifyContent": "space-between",
                                                "padding": 16,
                                              },
                                              Object {
                                                "backgroundColor": "#AAEEEF",
                                                "borderColor": "#003B3D",
                                              },
                                            ]
                                          }
                                        >
                                          <Text
                                            color="turquoise-850"
                                            defaultColor="black"
                                            defaultWeight="Regular"
                                            font="TitilliumWeb"
                                            fontStyle={
                                              Object {
                                                "fontSize": 16,
                                                "lineHeight": 20,
                                              }
                                            }
                                            style={
                                              Array [
                                                Object {
                                                  "paddingVertical": 2,
                                                },
                                                Object {
                                                  "fontSize": 16,
                                                  "lineHeight": 20,
                                                },
                                                Object {
                                                  "color": "#003B3D",
                                                  "fontFamily": "Titillium Web",
                                                  "fontStyle": "normal",
                                                  "fontWeight": "400",
                                                },
                                              ]
                                            }
                                            weight="Regular"
                                          >
                                            Hello
                                          </Text>
                                          <RNSVGSvgView
                                            accessibilityElementsHidden={true}
                                            accessibilityLabel=""
                                            accessible={false}
                                            align="xMidYMid"
                                            bbHeight={24}
                                            bbWidth={24}
                                            color={4278205245}
                                            focusable={false}
                                            height={24}
                                            importantForAccessibility="no-hide-descendants"
                                            meetOrSlice={0}
                                            minX={0}
                                            minY={0}
                                            style={
                                              Array [
                                                Object {
                                                  "backgroundColor": "transparent",
                                                  "borderWidth": 0,
                                                },
                                                Object {
                                                  "color": "#003B3D",
                                                },
                                                Object {
                                                  "flex": 0,
                                                  "height": 24,
                                                  "width": 24,
                                                },
                                              ]
                                            }
                                            tintColor={4278205245}
                                            vbHeight={24}
                                            vbWidth={24}
                                            width={24}
                                          >
                                            <RNSVGGroup>
                                              <RNSVGPath
                                                clipRule={0}
                                                d="M17.7071 9.29289C18.0976 9.68342 18.0976 10.3166 17.7071 10.7071L11.4142 17C10.6332 17.781 9.36684 17.7811 8.58579 17L5.29289 13.7071C4.90237 13.3166 4.90237 12.6834 5.29289 12.2929C5.68342 11.9024 6.31658 11.9024 6.70711 12.2929L10 15.5858L16.2929 9.29289C16.6834 8.90237 17.3166 8.90237 17.7071 9.29289Z"
                                                fill={
                                                  Array [
                                                    2,
                                                  ]
                                                }
                                                fillRule={0}
                                                propList={
                                                  Array [
                                                    "fill",
                                                    "fillRule",
                                                  ]
                                                }
                                              />
                                            </RNSVGGroup>
                                          </RNSVGSvgView>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;

exports[`Test ToastNotification component should match snapshot for props ({ message: 'Hello', variant: 'error' }) 1`] = `
Object {
  "component": <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MAIN
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={3}
                handlerType="PanGestureHandler"
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  collapsable={false}
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            />
                            <View
                              accessibilityElementsHidden={false}
                              closing={false}
                              gestureVelocityImpact={0.3}
                              importantForAccessibility="auto"
                              onClose={[Function]}
                              onGestureBegin={[Function]}
                              onGestureCanceled={[Function]}
                              onGestureEnd={[Function]}
                              onOpen={[Function]}
                              onTransition={[Function]}
                              pointerEvents="box-none"
                              style={
                                Array [
                                  Object {
                                    "overflow": undefined,
                                  },
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  },
                                ]
                              }
                              transitionSpec={
                                Object {
                                  "close": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                  "open": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                }
                              }
                            >
                              <View
                                collapsable={false}
                                needsOffscreenAlphaCompositing={false}
                                pointerEvents="box-none"
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  forwardedRef={[Function]}
                                  handlerTag={4}
                                  handlerType="PanGestureHandler"
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  style={
                                    Object {
                                      "flex": 1,
                                      "transform": Array [
                                        Object {
                                          "translateX": 0,
                                        },
                                        Object {
                                          "translateX": 0,
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="none"
                                    style={
                                      Object {
                                        "backgroundColor": "#FFFFFF",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "shadowColor": "#000",
                                        "shadowOffset": Object {
                                          "height": 1,
                                          "width": -1,
                                        },
                                        "shadowOpacity": 0.3,
                                        "shadowRadius": 5,
                                        "top": 0,
                                        "width": 3,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      Array [
                                        Object {
                                          "flex": 1,
                                          "overflow": "hidden",
                                        },
                                        Array [
                                          Object {
                                            "backgroundColor": "#FFFFFF",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        Object {
                                          "flex": 1,
                                          "flexDirection": "column-reverse",
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Object {
                                            "flex": 1,
                                          }
                                        }
                                      >
                                        <View
                                          accessibilityLabel="Hello"
                                          accessibilityRole="alert"
                                          accessible={true}
                                          style={
                                            Array [
                                              Object {
                                                "alignItems": "center",
                                                "borderRadius": 8,
                                                "borderWidth": 1,
                                                "flexDirection": "row",
                                                "justifyContent": "space-between",
                                                "padding": 16,
                                              },
                                              Object {
                                                "backgroundColor": "#FFE0E0",
                                                "borderColor": "#761F1F",
                                              },
                                            ]
                                          }
                                        >
                                          <Text
                                            color="error-850"
                                            defaultColor="black"
                                            defaultWeight="Regular"
                                            font="TitilliumWeb"
                                            fontStyle={
                                              Object {
                                                "fontSize": 16,
                                                "lineHeight": 20,
                                              }
                                            }
                                            style={
                                              Array [
                                                Object {
                                                  "paddingVertical": 2,
                                                },
                                                Object {
                                                  "fontSize": 16,
                                                  "lineHeight": 20,
                                                },
                                                Object {
                                                  "color": "#761F1F",
                                                  "fontFamily": "Titillium Web",
                                                  "fontStyle": "normal",
                                                  "fontWeight": "400",
                                                },
                                              ]
                                            }
                                            weight="Regular"
                                          >
                                            Hello
                                          </Text>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;

exports[`Test ToastNotification component should match snapshot for props ({ message: 'Hello', variant: 'info' }) 1`] = `
Object {
  "component": <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MAIN
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={5}
                handlerType="PanGestureHandler"
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  collapsable={false}
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            />
                            <View
                              accessibilityElementsHidden={false}
                              closing={false}
                              gestureVelocityImpact={0.3}
                              importantForAccessibility="auto"
                              onClose={[Function]}
                              onGestureBegin={[Function]}
                              onGestureCanceled={[Function]}
                              onGestureEnd={[Function]}
                              onOpen={[Function]}
                              onTransition={[Function]}
                              pointerEvents="box-none"
                              style={
                                Array [
                                  Object {
                                    "overflow": undefined,
                                  },
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  },
                                ]
                              }
                              transitionSpec={
                                Object {
                                  "close": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                  "open": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                }
                              }
                            >
                              <View
                                collapsable={false}
                                needsOffscreenAlphaCompositing={false}
                                pointerEvents="box-none"
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  forwardedRef={[Function]}
                                  handlerTag={6}
                                  handlerType="PanGestureHandler"
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  style={
                                    Object {
                                      "flex": 1,
                                      "transform": Array [
                                        Object {
                                          "translateX": 0,
                                        },
                                        Object {
                                          "translateX": 0,
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="none"
                                    style={
                                      Object {
                                        "backgroundColor": "#FFFFFF",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "shadowColor": "#000",
                                        "shadowOffset": Object {
                                          "height": 1,
                                          "width": -1,
                                        },
                                        "shadowOpacity": 0.3,
                                        "shadowRadius": 5,
                                        "top": 0,
                                        "width": 3,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      Array [
                                        Object {
                                          "flex": 1,
                                          "overflow": "hidden",
                                        },
                                        Array [
                                          Object {
                                            "backgroundColor": "#FFFFFF",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        Object {
                                          "flex": 1,
                                          "flexDirection": "column-reverse",
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Object {
                                            "flex": 1,
                                          }
                                        }
                                      >
                                        <View
                                          accessibilityLabel="Hello"
                                          accessibilityRole="alert"
                                          accessible={true}
                                          style={
                                            Array [
                                              Object {
                                                "alignItems": "center",
                                                "borderRadius": 8,
                                                "borderWidth": 1,
                                                "flexDirection": "row",
                                                "justifyContent": "space-between",
                                                "padding": 16,
                                              },
                                              Object {
                                                "backgroundColor": "#E1F5FE",
                                                "borderColor": "#215C76",
                                              },
                                            ]
                                          }
                                        >
                                          <Text
                                            color="info-850"
                                            defaultColor="black"
                                            defaultWeight="Regular"
                                            font="TitilliumWeb"
                                            fontStyle={
                                              Object {
                                                "fontSize": 16,
                                                "lineHeight": 20,
                                              }
                                            }
                                            style={
                                              Array [
                                                Object {
                                                  "paddingVertical": 2,
                                                },
                                                Object {
                                                  "fontSize": 16,
                                                  "lineHeight": 20,
                                                },
                                                Object {
                                                  "color": "#215C76",
                                                  "fontFamily": "Titillium Web",
                                                  "fontStyle": "normal",
                                                  "fontWeight": "400",
                                                },
                                              ]
                                            }
                                            weight="Regular"
                                          >
                                            Hello
                                          </Text>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;

exports[`Test ToastNotification component should match snapshot for props ({ message: 'Hello', variant: 'neutral' }) 1`] = `
Object {
  "component": <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MAIN
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={7}
                handlerType="PanGestureHandler"
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  collapsable={false}
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            />
                            <View
                              accessibilityElementsHidden={false}
                              closing={false}
                              gestureVelocityImpact={0.3}
                              importantForAccessibility="auto"
                              onClose={[Function]}
                              onGestureBegin={[Function]}
                              onGestureCanceled={[Function]}
                              onGestureEnd={[Function]}
                              onOpen={[Function]}
                              onTransition={[Function]}
                              pointerEvents="box-none"
                              style={
                                Array [
                                  Object {
                                    "overflow": undefined,
                                  },
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  },
                                ]
                              }
                              transitionSpec={
                                Object {
                                  "close": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                  "open": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                }
                              }
                            >
                              <View
                                collapsable={false}
                                needsOffscreenAlphaCompositing={false}
                                pointerEvents="box-none"
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  forwardedRef={[Function]}
                                  handlerTag={8}
                                  handlerType="PanGestureHandler"
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  style={
                                    Object {
                                      "flex": 1,
                                      "transform": Array [
                                        Object {
                                          "translateX": 0,
                                        },
                                        Object {
                                          "translateX": 0,
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="none"
                                    style={
                                      Object {
                                        "backgroundColor": "#FFFFFF",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "shadowColor": "#000",
                                        "shadowOffset": Object {
                                          "height": 1,
                                          "width": -1,
                                        },
                                        "shadowOpacity": 0.3,
                                        "shadowRadius": 5,
                                        "top": 0,
                                        "width": 3,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      Array [
                                        Object {
                                          "flex": 1,
                                          "overflow": "hidden",
                                        },
                                        Array [
                                          Object {
                                            "backgroundColor": "#FFFFFF",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        Object {
                                          "flex": 1,
                                          "flexDirection": "column-reverse",
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Object {
                                            "flex": 1,
                                          }
                                        }
                                      >
                                        <View
                                          accessibilityLabel="Hello"
                                          accessibilityRole="alert"
                                          accessible={true}
                                          style={
                                            Array [
                                              Object {
                                                "alignItems": "center",
                                                "borderRadius": 8,
                                                "borderWidth": 1,
                                                "flexDirection": "row",
                                                "justifyContent": "space-between",
                                                "padding": 16,
                                              },
                                              Object {
                                                "backgroundColor": "#AAEEEF",
                                                "borderColor": "#003B3D",
                                              },
                                            ]
                                          }
                                        >
                                          <Text
                                            color="turquoise-850"
                                            defaultColor="black"
                                            defaultWeight="Regular"
                                            font="TitilliumWeb"
                                            fontStyle={
                                              Object {
                                                "fontSize": 16,
                                                "lineHeight": 20,
                                              }
                                            }
                                            style={
                                              Array [
                                                Object {
                                                  "paddingVertical": 2,
                                                },
                                                Object {
                                                  "fontSize": 16,
                                                  "lineHeight": 20,
                                                },
                                                Object {
                                                  "color": "#003B3D",
                                                  "fontFamily": "Titillium Web",
                                                  "fontStyle": "normal",
                                                  "fontWeight": "400",
                                                },
                                              ]
                                            }
                                            weight="Regular"
                                          >
                                            Hello
                                          </Text>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;

exports[`Test ToastNotification component should match snapshot for props ({ message: 'Hello', variant: 'success' }) 1`] = `
Object {
  "component": <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MAIN
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={9}
                handlerType="PanGestureHandler"
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  collapsable={false}
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            />
                            <View
                              accessibilityElementsHidden={false}
                              closing={false}
                              gestureVelocityImpact={0.3}
                              importantForAccessibility="auto"
                              onClose={[Function]}
                              onGestureBegin={[Function]}
                              onGestureCanceled={[Function]}
                              onGestureEnd={[Function]}
                              onOpen={[Function]}
                              onTransition={[Function]}
                              pointerEvents="box-none"
                              style={
                                Array [
                                  Object {
                                    "overflow": undefined,
                                  },
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  },
                                ]
                              }
                              transitionSpec={
                                Object {
                                  "close": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                  "open": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                }
                              }
                            >
                              <View
                                collapsable={false}
                                needsOffscreenAlphaCompositing={false}
                                pointerEvents="box-none"
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  forwardedRef={[Function]}
                                  handlerTag={10}
                                  handlerType="PanGestureHandler"
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  style={
                                    Object {
                                      "flex": 1,
                                      "transform": Array [
                                        Object {
                                          "translateX": 0,
                                        },
                                        Object {
                                          "translateX": 0,
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="none"
                                    style={
                                      Object {
                                        "backgroundColor": "#FFFFFF",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "shadowColor": "#000",
                                        "shadowOffset": Object {
                                          "height": 1,
                                          "width": -1,
                                        },
                                        "shadowOpacity": 0.3,
                                        "shadowRadius": 5,
                                        "top": 0,
                                        "width": 3,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      Array [
                                        Object {
                                          "flex": 1,
                                          "overflow": "hidden",
                                        },
                                        Array [
                                          Object {
                                            "backgroundColor": "#FFFFFF",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        Object {
                                          "flex": 1,
                                          "flexDirection": "column-reverse",
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Object {
                                            "flex": 1,
                                          }
                                        }
                                      >
                                        <View
                                          accessibilityLabel="Hello"
                                          accessibilityRole="alert"
                                          accessible={true}
                                          style={
                                            Array [
                                              Object {
                                                "alignItems": "center",
                                                "borderRadius": 8,
                                                "borderWidth": 1,
                                                "flexDirection": "row",
                                                "justifyContent": "space-between",
                                                "padding": 16,
                                              },
                                              Object {
                                                "backgroundColor": "#E1F4E1",
                                                "borderColor": "#224021",
                                              },
                                            ]
                                          }
                                        >
                                          <Text
                                            color="success-850"
                                            defaultColor="black"
                                            defaultWeight="Regular"
                                            font="TitilliumWeb"
                                            fontStyle={
                                              Object {
                                                "fontSize": 16,
                                                "lineHeight": 20,
                                              }
                                            }
                                            style={
                                              Array [
                                                Object {
                                                  "paddingVertical": 2,
                                                },
                                                Object {
                                                  "fontSize": 16,
                                                  "lineHeight": 20,
                                                },
                                                Object {
                                                  "color": "#224021",
                                                  "fontFamily": "Titillium Web",
                                                  "fontStyle": "normal",
                                                  "fontWeight": "400",
                                                },
                                              ]
                                            }
                                            weight="Regular"
                                          >
                                            Hello
                                          </Text>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;

exports[`Test ToastNotification component should match snapshot for props ({ message: 'Hello', variant: 'warning' }) 1`] = `
Object {
  "component": <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MAIN
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                handlerTag={11}
                handlerType="PanGestureHandler"
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  collapsable={false}
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#FFFFFF",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "#FFFFFF",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            />
                            <View
                              accessibilityElementsHidden={false}
                              closing={false}
                              gestureVelocityImpact={0.3}
                              importantForAccessibility="auto"
                              onClose={[Function]}
                              onGestureBegin={[Function]}
                              onGestureCanceled={[Function]}
                              onGestureEnd={[Function]}
                              onOpen={[Function]}
                              onTransition={[Function]}
                              pointerEvents="box-none"
                              style={
                                Array [
                                  Object {
                                    "overflow": undefined,
                                  },
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  },
                                ]
                              }
                              transitionSpec={
                                Object {
                                  "close": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                  "open": Object {
                                    "animation": "spring",
                                    "config": Object {
                                      "damping": 500,
                                      "mass": 3,
                                      "overshootClamping": true,
                                      "restDisplacementThreshold": 10,
                                      "restSpeedThreshold": 10,
                                      "stiffness": 1000,
                                    },
                                  },
                                }
                              }
                            >
                              <View
                                collapsable={false}
                                needsOffscreenAlphaCompositing={false}
                                pointerEvents="box-none"
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  collapsable={false}
                                  forwardedRef={[Function]}
                                  handlerTag={12}
                                  handlerType="PanGestureHandler"
                                  onGestureHandlerEvent={[Function]}
                                  onGestureHandlerStateChange={[Function]}
                                  style={
                                    Object {
                                      "flex": 1,
                                      "transform": Array [
                                        Object {
                                          "translateX": 0,
                                        },
                                        Object {
                                          "translateX": 0,
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <View
                                    collapsable={false}
                                    pointerEvents="none"
                                    style={
                                      Object {
                                        "backgroundColor": "#FFFFFF",
                                        "bottom": 0,
                                        "left": 0,
                                        "position": "absolute",
                                        "shadowColor": "#000",
                                        "shadowOffset": Object {
                                          "height": 1,
                                          "width": -1,
                                        },
                                        "shadowOpacity": 0.3,
                                        "shadowRadius": 5,
                                        "top": 0,
                                        "width": 3,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      Array [
                                        Object {
                                          "flex": 1,
                                          "overflow": "hidden",
                                        },
                                        Array [
                                          Object {
                                            "backgroundColor": "#FFFFFF",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        Object {
                                          "flex": 1,
                                          "flexDirection": "column-reverse",
                                        }
                                      }
                                    >
                                      <View
                                        style={
                                          Object {
                                            "flex": 1,
                                          }
                                        }
                                      >
                                        <View
                                          accessibilityLabel="Hello"
                                          accessibilityRole="alert"
                                          accessible={true}
                                          style={
                                            Array [
                                              Object {
                                                "alignItems": "center",
                                                "borderRadius": 8,
                                                "borderWidth": 1,
                                                "flexDirection": "row",
                                                "justifyContent": "space-between",
                                                "padding": 16,
                                              },
                                              Object {
                                                "backgroundColor": "#FFF5DA",
                                                "borderColor": "#614C15",
                                              },
                                            ]
                                          }
                                        >
                                          <Text
                                            color="warning-850"
                                            defaultColor="black"
                                            defaultWeight="Regular"
                                            font="TitilliumWeb"
                                            fontStyle={
                                              Object {
                                                "fontSize": 16,
                                                "lineHeight": 20,
                                              }
                                            }
                                            style={
                                              Array [
                                                Object {
                                                  "paddingVertical": 2,
                                                },
                                                Object {
                                                  "fontSize": 16,
                                                  "lineHeight": 20,
                                                },
                                                Object {
                                                  "color": "#614C15",
                                                  "fontFamily": "Titillium Web",
                                                  "fontStyle": "normal",
                                                  "fontWeight": "400",
                                                },
                                              ]
                                            }
                                            weight="Regular"
                                          >
                                            Hello
                                          </Text>
                                        </View>
                                      </View>
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>,
  "store": Object {
    "clearActions": [Function],
    "dispatch": [Function],
    "getActions": [Function],
    "getState": [Function],
    "replaceReducer": [Function],
    "subscribe": [Function],
  },
}
`;
