project.ext.envConfigFiles = [
  debug: ".env",
  release: ".env.production"
]

apply plugin: "com.android.application"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

// usage: ./gradlew assembleDebug -PbundleInDebug=true
def bundleInDebugPropertyName = "bundleInDebug"
def bundleDebug = false
if (project.hasProperty(bundleInDebugPropertyName)) {
    println bundleInDebugPropertyName + ': ' + bundleInDebug
    bundleDebug = project.getProperty(bundleInDebugPropertyName)
}
 
project.ext.react = [
  enableHermes: true,
  bundleInDebug: bundleDebug
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "it.pagopa.io.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 100154789
        versionName "2.51.0.1"
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        if (isNewArchitectureEnabled()) {
            // We configure the NDK build only if you decide to opt-in for the New Architecture.
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                        "APP_STL=c++_shared",
                        "NDK_TOOLCHAIN_VERSION=clang",
                        "GENERATED_SRC_DIR=$buildDir/generated/source",
                        "PROJECT_BUILD_DIR=$buildDir",
                        "REACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
                        "REACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build",
                        "NODE_MODULES_DIR=$rootDir/../node_modules"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    // Make sure this target name is the same you specify inside the
                    // src/main/jni/Android.mk file for the `LOCAL_MODULE` variable.
                    targets "ioapp_appmodules"
                }
            }
            if (!enableSeparateBuildPerCPUArchitecture) {
                ndk {
                    abiFilters (*reactNativeArchitectures())
                }
            }
        }
        multiDexEnabled true
        // The resConfigs attribute will remove all not required localized resources while building the application,
        // including the localized resources from libraries.

        if (isNewArchitectureEnabled()) {
          // We configure the NDK build only if you decide to opt-in for the New Architecture.
          externalNativeBuild {
              ndkBuild {
                  path "$projectDir/src/main/jni/Android.mk"
              }
          }
          def reactAndroidProjectDir = project(':ReactAndroid').projectDir
          def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
              dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
              from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
              into("$buildDir/react-ndk/exported")
          }
          def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
              dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
              from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
              into("$buildDir/react-ndk/exported")
          }
          afterEvaluate {
              // If you wish to add a custom TurboModule or component locally,
              // you should uncomment this line.
              // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
              preDebugBuild.dependsOn(packageReactNdkDebugLibs)
              preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)
              // Due to a bug inside AGP, we have to explicitly set a dependency
              // between configureNdkBuild* tasks and the preBuild tasks.
              // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
              configureNdkBuildRelease.dependsOn(preReleaseBuild)
              configureNdkBuildDebug.dependsOn(preDebugBuild)
              reactNativeArchitectures().each { architecture ->
                  tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
                      dependsOn("preDebugBuild")
                  }
                  tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
                      dependsOn("preReleaseBuild")
                  }
              }
          }
        }
    }
    signingConfigs {
        release {
            if (System.getenv('IO_APP_RELEASE_STORE_FILE')) {
                storeFile file(System.getenv('IO_APP_RELEASE_STORE_FILE'))
                storePassword System.getenv('IO_APP_RELEASE_STORE_PASSWORD')
                keyAlias System.getenv('IO_APP_RELEASE_KEY_ALIAS')
                keyPassword System.getenv('IO_APP_RELEASE_KEY_PASSWORD')
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            // The shrinkResources attribute will remove all the resources that are not used in the project
            shrinkResources enableProguardInReleaseBuilds
            // proguard-android-optimize.txt includes the same ProGuard (proguard-android.txt) rules,
            // but with other optimizations that perform analysis at the bytecode level—inside and
            // across methods to reduce the APK size further and help it run faster.
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }

    // The Android App Bundle read this section to create different bundles
    bundle {
        language {
            // Disable split by language
            enableSplit = false
        }

        density {
            // Disable split by density
            enableSplit = false
        }

        abi {
            // Enable split by abi
            enableSplit = true
        }
    }
}

def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", false)

dependencies {
    implementation project(':jail-monkey')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-share')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    implementation project(':react-native-cie')

    implementation ("com.squareup.okhttp3:okhttp:4.9.2"){
        force = true
    }
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.2'

    if (enableHermes) {
        //noinspection GradleDynamicVersion
        implementation("com.facebook.react:hermes-engine:+") { // From node_modules
            exclude group:'com.facebook.fbjni'
        }
    } else {
        implementation jscFlavor
    }
    if (isNewArchitectureEnabled()) {
        // If new architecture is enabled, we let you build RN from source
        // Otherwise we fallback to a prebuilt .aar bundled in the NPM package.
        // This will be applied to all the imported transtitive dependency.
        configurations.all {
            resolutionStrategy.dependencySubstitution {
                substitute(module("com.facebook.react:react-native"))
                        .using(project(":ReactAndroid"))
                        .because("On New Architecture we're building React Native from source")
                substitute(module("com.facebook.react:hermes-engine"))
                        .using(project(":ReactAndroid:hermes-engine"))
                        .because("On New Architecture we're building Hermes from source")
            }
        }
    }
    implementation project(':@react-native-community_datetimepicker')
    implementation project(':react-native-fingerprint-scanner')
    implementation project(':react-native-art')
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.41"
    implementation('com.google.firebase:firebase-iid:21.1.0') {
        because "Firebase messaging 22.0.0 removes Firebase Instance ID API but out current version of the mixpanel sdk requires it https://github.com/mixpanel/mixpanel-android/issues/744 https://firebase.google.com/support/release-notes/android#messaging_v22-0-0"
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

// Add the following line to the bottom of the file:
apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}
