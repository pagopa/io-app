#
# Defaults
#

# shared

defaults: &defaults
  working_directory: ~/italia-app

node_cache_key: &node_cache_key v1.14-dependencies-{{ checksum "yarn.lock" }}

android_sdk_cache_key: &android_sdk_cache_key v1-android-sdkmanager-packages-{{ checksum "scripts/circleci-android-setup.sh" }}

android_jars_cache_key: &android_jars_cache_key jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

ios_gems_cache_key: &ios_gems_cache_key ruby-{{ checksum "Gemfile.lock" }}

release_tag: &release_tag /^[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$/

# nodejs builds
defaults_js: &defaults_js
  <<: *defaults
  docker:
    - image: cimg/node:14.17.4

# android builds
defaults_android: &defaults_android
  <<: *defaults
  docker:
    - image: cimg/android:2021.10.2-node
  environment:
    TERM: "dumb"
    ANDROID_SDK_BUILD_TOOLS_REVISION: "28.0.3"
    ANDROID_SDK_BUILD_API_LEVEL: "28"
    ANDROID_GOOGLE_API_LEVEL: "23"
    # - REACT_NATIVE_MAX_WORKERS: 1
    GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx8g -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError"'

# macos builds
defaults_macos: &defaults_macos
  <<: *defaults
  macos:
    xcode: "12.5.1"
  working_directory: /Users/distiller/italia-app
  environment:
    # Fastlane requires locale set to UTF-8
    # see https://docs.fastlane.tools/getting-started/ios/setup/#set-up-environment-variables
    LC_ALL: en_US.UTF-8
    LANG: en_US.UTF-8
    # Set Fastlane output dir
    FL_OUTPUT_DIR: output
    # Make Ruby bundler a little faster
    BUNDLE_JOBS: 4
    BUNDLE_RETRY: 3
    BUNDLE_PATH: vendor/bundle
  shell: /bin/bash --login -o pipefail

restore_node_cache: &restore_node_cache
  restore_cache:
    keys:
      - *node_cache_key

save_node_cache: &save_node_cache
  save_cache:
    paths:
      - node_modules
    key: *node_cache_key

install_node_modules: &install_node_modules
  run:
    name: install npm packages
    command: |
      yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1

#
# Build pipeline
#

version: 2
jobs:
  # Compile typescript
  compile-typescript:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules
      - *save_node_cache

      # Build app
      - run: yarn generate:all
      # Needed to make compliant old Android code to AndroidX
      - run: yarn jetify
      - run: yarn tsc:noemit

      # Save workspace for next jobs in the workflow
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - italia-app

  # Runs tests
  run-tests:
    <<: *defaults_js

    resource_class: xlarge

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Generate models and locales
      - run: yarn generate:all

      # Run tests
      - run:
          command: |
              TEST=$(circleci tests glob **/__test*__/*.ts* | circleci tests split)
              yarn test $TEST
      - run: ./scripts/codecov.sh
    parallelism: 8

  # Runs ESlint checks on PR
  run-eslint:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Run linter
      - run: yarn lint

  # Check if all files respect the prettier rules
  run-prettier:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Run linter
      - run: yarn prettier:check

  # Runs Danger checks on PR
  run-danger:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Run DangerJS
      - run: '[ -z "$DANGER_GITHUB_API_TOKEN" ] || yarn danger ci'

  # Check for outdated dependencies and create a report
  check-outdated-dependencies:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules
      - run: '[ -z "IO_APP_SLACK_HELPER_BOT_TOKEN" ] || yarn ts-node --skip-project -O
       ''{"lib":["es2015"]}'' scripts/ts/checkOutdatedDependencies/checkOutdatedDependencies.ts'

  # Send a Slack message to notify the release of a new app version in beta
  notify-new-app-version:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules
      - run: '[ -z "IO_APP_SLACK_HELPER_BOT_TOKEN" ] || yarn ts-node --skip-project -O
       ''{"lib":["es2015"]}'' scripts/ts/notifyNewAppVersion/notifyNewAppVersion.ts'

  # Create signed Android release
  android-release:
    <<: *defaults_android

    resource_class: xlarge

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Restore sdk cache
      - restore_cache:
          keys:
            - *android_sdk_cache_key

      # Install Android SDK
      - run:
          command: ./scripts/circleci-android-setup.sh

      # Restore jars cache
      - restore_cache:
          key: *android_jars_cache_key

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Recreate google-services.json from ENV variable
      - run:
          command: ./scripts/google-services-json-file-setup.sh ./android/app

      # Recreate JSON key file (for Google Play) from ENV variable
      - run:
          command: ./scripts/json-key-file-setup.sh

      # Recreate keystore from ENV variable
      - run:
          command: ./scripts/keystore-setup.sh

      # Build the js bundle in release mode
      - run: yarn bundle:android-release

      # Run alpha lane
      - run:
          command: cd android && bundle exec fastlane build_release

      - store_artifacts:
          path: android/app/build/outputs/bundle
          destination: bundle

  # Create signed Android release and deploy a new alpha version to the Google Play Store
  alpha-release-android:
    <<: *defaults_android

    resource_class: xlarge

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Restore sdk cache
      - restore_cache:
          keys:
            - *android_sdk_cache_key

      # Install Android SDK
      - run:
          command: ./scripts/circleci-android-setup.sh

      # Restore jars cache
      - restore_cache:
          key: *android_jars_cache_key

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Recreate google-services.json from ENV variable
      - run:
          command: ./scripts/google-services-json-file-setup.sh ./android/app

      # Recreate JSON key file (for Google Play) from ENV variable
      - run:
          command: ./scripts/json-key-file-setup.sh

      # Recreate keystore from ENV variable
      - run:
          command: ./scripts/keystore-setup.sh

      # Build the js bundle in release mode
      - run:
          command: yarn bundle:android-release

      # Run alpha lane
      - run:
          command: cd android && bundle exec fastlane alpha

      - store_artifacts:
          path: android/app/build/outputs/bundle
          destination: bundle

  # Create a release build, submit to the store and distributes to the beta testers
  ios-beta-release:
    <<: *defaults_macos

    # Not supported with the current plan
    # resource_class: large

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Restore bundle cache
      - restore_cache:
          keys:
            - *ios_gems_cache_key

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler:$BUNDLER_VERSION

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: *ios_gems_cache_key
          paths:
            - vendor/bundle

      - run: ./scripts/ios-release-build.sh

      - add_ssh_keys:
          fingerprints:
            - "f6:10:4f:48:64:51:83:2c:e4:3c:80:36:42:f2:4c:0b"

      # Run beta_circleci_testflight lane
      - run:
          name: Build & submit to App store
          command: |
            cd ios
            bundle exec fastlane beta_circleci_testflight

  pagopa_specs_diff:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: check api specs alignment
          command: ./scripts/pagopa_api_check.sh

  io_check_uris:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: check uris validity on static texts
          command: |
            cd scripts/check_urls
            pipenv install
            pipenv run python3 check_urls.py

  io_check_cie_button_exists_ios:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: check cie button existence
          command: |
            cd scripts/check_cie_button_exists
            pipenv install
            pipenv run python3 check_cie_button_exists_ios.py

###############################################################################
# Prepare the environment, build, and run e2e tests
###############################################################################
  run-e2e-test-IOS:
    <<: *defaults_macos

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Restore bundle cache
      - restore_cache:
          keys:
            - *ios_gems_cache_key

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler:$BUNDLER_VERSION

      - run:
          name: Install Bundle
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: *ios_gems_cache_key
          paths:
            - vendor/bundle

      - run:
          name: Prepare dependencies for build
          command: |
            cp .env.local .env
            yarn run postinstall
            cd ios && bundle exec pod install --verbose
            rm -rf /tmp/metro-bundler-cache-*
            rm -rf /tmp/haste-map-react-native-packager-*

      - run:
          name: Install Detox and simulator's utils
          command: |
            npm install -g ios-sim
            brew tap wix/brew
            brew install applesimutils
            ios-sim showdevicetypes

      - run:
          name: Prepare build for Detox
          command: yarn detox build -c ios.sim.release

      - run:
          name: Run E2E tests with io-dev-api server
          command: |
            git clone git@github.com:pagopa/io-dev-api-server.git --branch master --single-branch _io-dev-api-server_
            cd _io-dev-api-server_
            cp ../scripts/api-config.json config/config.json
            yarn
            yarn start > /tmp/io-dev-api-server.log &
            # wait for the server to be up and running
            sleep 10
            cd ..
            yarn detox clean-framework-cache
            yarn detox build-framework-cache
            yarn detox test \
              --loglevel verbose \
              -c ios.sim.release \
              --cleanup \
              --artifacts-location /tmp/e2e_artifacts/detox/ \
              --record-logs all \
              --take-screenshots all \
              --debug-synchronization 1000

      # store detox artifacts
      - store_artifacts:
          path: /tmp/e2e_artifacts

      - store_artifacts:
          path: /tmp/io-dev-api-server.log


workflows:
  version: 2
  build:
    jobs:
      - compile-typescript
      - run-tests
      - run-eslint
      - run-prettier

      - run-danger:
          filters:
            branches:
              ignore: master

  # Release workflow triggered only when a new release tag is pushed
  release:
    jobs:
      - compile-typescript:
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/

      - run-tests:
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/

      - run-eslint:
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/
      - run-prettier:
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/

      # Build Android alpha release & submit to play store
      - alpha-release-android:
          requires:
            - compile-typescript
            - run-tests
            - run-eslint
            - run-prettier
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/

      # Create a release build, submit to the store and distributes to the beta testers
      - ios-beta-release:
          requires:
            - compile-typescript
            - run-tests
            - run-eslint
            - run-prettier
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/

      # Send a Slack message to notify the release of a new app version in beta
      - notify-new-app-version:
          requires:
            - ios-beta-release
            - alpha-release-android
          filters:
            tags:
              only: *release_tag
            branches:
              ignore: /.*/

  # nightly workflow to check pagopa specs (runs only on master branch)
  # if prod and dev specs are different
  # a slack notification will be sent on channel #io-status
  nightly-pagopa-specs-check:
    triggers:
      - schedule:
          cron: "0 03 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - pagopa_specs_diff
      - io_check_uris
      # see https://www.pivotaltracker.com/n/projects/2048617/stories/177755852
      # - io_check_cie_button_exists_ios

  # weekly workflow to run e2e tests
  # set to run on Monday at 0 so that by office hours we get a fresh report
  weekly-e2e-tests:
    triggers:
      - schedule:
          cron: "0 0 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      # TODO: Native Android e2e tests
      # TODO: Slack integration
      - compile-typescript
      - run-e2e-test-IOS:
          requires:
            - compile-typescript

  # Run a weekly report At 16:00 on Friday
  weekly-report:
    triggers:
      - schedule:
          cron: "0 14 * * 5"
          filters:
            branches:
              only:
                - master
    jobs:
      - check-outdated-dependencies
