#
# Defaults
#

# shared
defaults: &defaults
  working_directory: ~/italia-app

# nodejs builds
defaults_js: &defaults_js
  <<: *defaults
  parallelism: 2
  docker:
    - image: circleci/node:8

# android builds
defaults_android: &defaults_android
  <<: *defaults
  docker:
    - image: circleci/android:api-23-node8-alpha
  environment:
    - TERM: "dumb"
    - ANDROID_SDK_BUILD_TOOLS_REVISION: "23.0.1"
    - ANDROID_SDK_BUILD_API_LEVEL: "23"
    - REACT_NATIVE_MAX_WORKERS: 1

# macos builds
defaults_macos: &defaults_macos
  <<: *defaults
  macos:
    xcode: "9.3.1"
  working_directory: /Users/distiller/italia-app
  environment:
    # Fastlane requires locale set to UTF-8
    # see https://docs.fastlane.tools/getting-started/ios/setup/#set-up-environment-variables
    LC_ALL: en_US.UTF-8
    LANG: en_US.UTF-8
    # Set Fastlane output dir
    FL_OUTPUT_DIR: output
    # Make Ruby bundler a little faster
    BUNDLE_JOBS: 3
    BUNDLE_RETRY: 3
    BUNDLE_PATH: vendor/bundle
  shell: /bin/bash --login -o pipefail

#
# Build pipeline
#

version: 2
jobs:
  # Runs JavaScript tests on Node 8
  test-js-node-8:
    <<: *defaults_js

    steps:
      - checkout

      # Restore dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "yarn.lock" }}
          - v1-dependencies-

      # Install node dependencies
      - run: yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1

      # Save node cache
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "yarn.lock" }}

      # Run linter
      - run: yarn lint

      # Build app
      - run: yarn generate:all
      - run: yarn tsc:noemit

      # Run tests
      - run: yarn test
      - run: 'bash <(curl -s https://codecov.io/bash)'

      # Run DangerJS
      - run: '[ -z "$DANGER_GITHUB_API_TOKEN" ] || yarn danger ci'

      # Save workspace for next jobs in the workflow
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - italia-app

  # Build Android bundle
  build-android-bundle:
    <<: *defaults_js

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Create bundles dir
      - run: mkdir -p ./bundles

      # Run bundle command for android platform
      - run: yarn bundle:android

      - persist_to_workspace:
          root: bundles
          paths:
            - index.android.bundle
      - store_artifacts:
          path: bundles/index.android.bundle

  # Run test on android
  test-android:
    <<: *defaults_android

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Restore sdk cache
      - restore_cache:
          keys:
            - v1-android-sdkmanager-packages-{{ checksum "scripts/circleci-android-setup.sh" }}
            - v1-android-sdkmanager-packages-

      # Install Android SDK
      - run:
          command: ./scripts/circleci-android-setup.sh

      # Save sdk cache
      - save_cache:
          paths:
            - /opt/android/sdk/system-images/android-23
            - /opt/android/sdk/system-images/android-19
            - /opt/android/sdk/platforms/android-26
            - /opt/android/sdk/platforms/android-23
            - /opt/android/sdk/platforms/android-19
            - /opt/android/sdk/build-tools/23.0.1
            - /opt/android/sdk/add-ons/addon-google_apis-google-2
          key: v1-android-sdkmanager-packages-{{ checksum "scripts/circleci-android-setup.sh" }}

      # Restore jars cache
      - restore_cache:
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

      # Run gradle assembleDebug
      - run:
          command: cd android && ./gradlew assembleDebug

      # Save jars cache
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

  # Create signed Android release and deploy a new alpha version to the Google Play Store
  alpha-release-android:
    <<: *defaults_android

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Restore sdk cache
      - restore_cache:
          keys:
            - v1-android-sdkmanager-packages-{{ checksum "scripts/circleci-android-setup.sh" }}
            - v1-android-sdkmanager-packages-

      # Install Android SDK
      - run:
          command: ./scripts/circleci-android-setup.sh

      # Restore jars cache
      - restore_cache:
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

      # Set Ruby Version for chruby
      - run: echo "ruby-2.4" > .ruby-version

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Recreate JSON key file (for Google Play) from ENV variable
      - run:
          command: ./scripts/json-key-file-setup.sh

      # Recreate keystore from ENV variable
      - run:
          command: ./scripts/keystore-setup.sh

      # Build the js bundle in release mode
      - run: yarn bundle:android-release

      # Run alpha lane
      - run:
          command: cd android && bundle exec fastlane alpha

      - store_artifacts:
          path: android/app/build/outputs/apk
          destination: apks/release

  # Test ios build
  test-ios:
    <<: *defaults_macos

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Restore bundle cache
      - restore_cache:
          keys:
            - ruby-{{ checksum "Gemfile.lock" }}
            - ruby-

      # Set Ruby Version for chruby
      - run: echo "ruby-2.4" > .ruby-version

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: ruby-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Fetch CocoaPods specs
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf

      # Re-run postinstall scripts (setup of react-native libs)
      - run: npm run postinstall

      # Move to the ios project directory and run the test_build lane
      - run: cd ios && bundle exec fastlane test_build

  # Prepare build for end-to-end iOS tests
  test-ios-e2e-build:
    <<: *defaults_macos

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Restore bundle cache
      - restore_cache:
          keys:
            - ruby-{{ checksum "Gemfile.lock" }}
            - ruby-

      # Set Ruby Version for chruby
      - run: echo "ruby-2.4" > .ruby-version

      # TODO: possibly remove this after the following issue has been fixed:
      # https://github.com/GeekyAnts/NativeBase/issues/1957
      - run: '[ -d node_modules/native-base/dist/src/Utils ] && mv node_modules/native-base/dist/src/Utils node_modules/native-base/dist/src/utils'
      - run: '[ -d node_modules/native-base/src/Utils ] && mv node_modules/native-base/src/Utils node_modules/native-base/src/utils'

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: ruby-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Fetch CocoaPods specs
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf

      # Re-run postinstall scripts (setup of react-native libs)
      - run: npm run postinstall

      # Install pods
      - run: cd ios && bundle exec pod install --verbose

      # Install Detox and ios-sim utils
      # see: https://github.com/wix/detox/
      - run: npm install -g detox

      # cleanup metro and haste cache
      - run: rm -rf /tmp/metro-bundler-cache-*
      - run: rm -rf /tmp/haste-map-react-native-packager-*

      # Run detox e2e tests
      - run: detox build -c ios.sim.release

      # Save workspace for next jobs in the workflow
      - persist_to_workspace:
          root: /Users/distiller
          paths:
            - italia-app

  # Run end-to-end iOS tests
  test-ios-e2e-run:
    <<: *defaults_macos

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Install Detox and ios-sim utils
      # see: https://github.com/wix/detox/
      - run: npm install -g detox ios-sim

      # Install required tools
      # see: https://github.com/wix/detox/blob/master/docs/Guide.RunningOnCI.md
      - run: brew tap wix/brew
      - run: brew install applesimutils

      # Enumerate device types available in simulator
      - run: ios-sim showdevicetypes

      # Start emulator in background
      - run:
          command: ios-sim start --verbose --log /tmp/detox.last_launch_app_log --devicetypeid "iPhone-6, 10.3"
          background: true

      # Run detox e2e tests
      - run: detox test --loglevel verbose -c ios.sim.release --cleanup --artifacts-location /tmp/detox_artifacts/ --record-logs all --take-screenshots all --debug-synchronization 1000

      # store detox artifacts
      - store_artifacts:
          path: /tmp/detox_artifacts

workflows:
  version: 2
  build:
    jobs:
      # Lint ant test Javascript
      - test-js-node-8

      # Build Android bundle
      - build-android-bundle:
          requires:
            - test-js-node-8

      # To avoid running too many (long) native builds and tests, this step
      # waits the approval for the iOS and Android native tests.
      - hold-native-tests:
          type: approval
          requires:
            - build-android-bundle

      # Native Android tests
      - test-android:
          requires:
            - hold-native-tests

      # Native iOS e2e tests
      - hold-ios-e2e-tests:
          type: approval
          requires:
            - test-js-node-8
      - test-ios-e2e-build:
          requires:
            - hold-ios-e2e-tests
      - test-ios-e2e-run:
          requires:
            - test-ios-e2e-build

      # Build Android alpha release only on master branch
      - alpha-release-android:
          requires:
            - test-js-node-8
          filters:
            branches:
              only: master
