#
# Defaults
#

# shared

defaults: &defaults
  working_directory: ~/italia-app

node_cache_key: &node_cache_key v1.12-dependencies-{{ checksum "yarn.lock" }}

android_sdk_cache_key: &android_sdk_cache_key v1-android-sdkmanager-packages-{{ checksum "scripts/circleci-android-setup.sh" }}

android_jars_cache_key: &android_jars_cache_key jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

ios_gems_cache_key: &ios_gems_cache_key ruby-{{ checksum "Gemfile.lock" }}

# nodejs builds
defaults_js: &defaults_js
  <<: *defaults
  docker:
    - image: circleci/node:10

# android builds
defaults_android: &defaults_android
  <<: *defaults
  docker:
    - image: circleci/android:api-23-node8-alpha
  environment:
    TERM: "dumb"
    ANDROID_SDK_BUILD_TOOLS_REVISION: "28.0.3"
    ANDROID_SDK_BUILD_API_LEVEL: "28"
    ANDROID_GOOGLE_API_LEVEL: "23"
    # - REACT_NATIVE_MAX_WORKERS: 1
    GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx8g -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError"'
    RUBY_VERSION: ruby-2.4

# macos builds
defaults_macos: &defaults_macos
  <<: *defaults
  macos:
    xcode: "9.3.1"
  working_directory: /Users/distiller/italia-app
  environment:
    # Fastlane requires locale set to UTF-8
    # see https://docs.fastlane.tools/getting-started/ios/setup/#set-up-environment-variables
    LC_ALL: en_US.UTF-8
    LANG: en_US.UTF-8
    # Set Fastlane output dir
    FL_OUTPUT_DIR: output
    # Make Ruby bundler a little faster
    BUNDLE_JOBS: 4
    BUNDLE_RETRY: 3
    BUNDLE_PATH: vendor/bundle
  shell: /bin/bash --login -o pipefail

restore_node_cache: &restore_node_cache
  restore_cache:
    keys:
      - *node_cache_key

save_node_cache: &save_node_cache
  save_cache:
    paths:
      - node_modules
    key: *node_cache_key

install_node_modules: &install_node_modules
  run:
    name: install npm packages
    command: |
      echo "//npm.pkg.github.com/:_authToken=$GITHUB_PACKAGE_APP_TOKEN" > ~/.npmrc
      yarn install --frozen-lockfile --no-progress --non-interactive --network-concurrency 1

#
# Build pipeline
#

version: 2
jobs:
  # Compile typescript
  compile-typescript:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules
      - *save_node_cache

      # Build app
      - run: yarn generate:all
      # Needed to make compliant old Android code to AndroidX
      - run: yarn jetify
      - run: yarn tsc:noemit

      # Save workspace for next jobs in the workflow
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - italia-app

  # Runs tests
  run-tests:
    <<: *defaults_js

    resource_class: xlarge

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Generate models and locales
      - run: yarn generate:all

      # Run tests
      - run: yarn test
      - run: "bash <(curl -s https://codecov.io/bash)"

  # Runs Danger checks on PR
  lint-typescript:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Run linter
      - run: yarn lint

  # Runs Danger checks on PR
  run-danger:
    <<: *defaults_js

    steps:
      - checkout
      - *restore_node_cache
      - *install_node_modules

      # Run DangerJS
      - run: '[ -z "$DANGER_GITHUB_API_TOKEN" ] || yarn danger ci'

  # Create signed Android release
  android-release:
    <<: *defaults_android

    resource_class: xlarge

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Restore sdk cache
      - restore_cache:
          keys:
            - *android_sdk_cache_key

      # Install Android SDK
      - run:
          command: ./scripts/circleci-android-setup.sh

      # Restore jars cache
      - restore_cache:
          key: *android_jars_cache_key

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Recreate google-services.json from ENV variable
      - run:
          command: ./scripts/google-services-json-file-setup.sh ./android/app

      # Recreate JSON key file (for Google Play) from ENV variable
      - run:
          command: ./scripts/json-key-file-setup.sh

      # Recreate keystore from ENV variable
      - run:
          command: ./scripts/keystore-setup.sh

      # Build the js bundle in release mode
      - run: yarn bundle:android-release

      # Run alpha lane
      - run:
          command: cd android && bundle exec fastlane build_release

      - store_artifacts:
          path: android/app/build/outputs/bundle
          destination: bundle

  # Create signed Android release and deploy a new alpha version to the Google Play Store
  alpha-release-android:
    <<: *defaults_android

    resource_class: xlarge

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /home/circleci

      # Restore sdk cache
      - restore_cache:
          keys:
            - *android_sdk_cache_key

      # Install Android SDK
      - run:
          command: ./scripts/circleci-android-setup.sh

      # Restore jars cache
      - restore_cache:
          key: *android_jars_cache_key

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Recreate google-services.json from ENV variable
      - run:
          command: ./scripts/google-services-json-file-setup.sh ./android/app

      # Recreate JSON key file (for Google Play) from ENV variable
      - run:
          command: ./scripts/json-key-file-setup.sh

      # Recreate keystore from ENV variable
      - run:
          command: ./scripts/keystore-setup.sh

      # Build the js bundle in release mode
      - run:
          command: yarn bundle:android-release

      # Run alpha lane
      - run:
          command: cd android && bundle exec fastlane alpha

      - store_artifacts:
          path: android/app/build/outputs/bundle
          destination: bundle

  # Test ios build
  test-ios:
    <<: *defaults_macos

    resource_class: large

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Restore bundle cache
      - restore_cache:
          keys:
            - *ios_gems_cache_key

      # Set Ruby Version for chruby
      - run: echo "ruby-2.4" > .ruby-version

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Remove watchman from node global packages
      - run:
          name: Remove watchman from node global packages
          command: npm r -g watchman

      # Install watchman with brew
      - run:
          name: Install watchman
          command: |
            brew update
            brew install watchman || exit 0

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: *ios_gems_cache_key
          paths:
            - vendor/bundle

      # Fetch CocoaPods specs
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf

      # Re-run postinstall scripts (setup of react-native libs)
      - run: npm run postinstall

      # Move to the ios project directory and run the test_build lane
      - run: cd ios && bundle exec fastlane test_build

  # Prepare build for end-to-end iOS tests
  test-ios-e2e-build:
    <<: *defaults_macos

    resource_class: large

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Restore bundle cache
      - restore_cache:
          keys:
            - *ios_gems_cache_key

      # Set Ruby Version for chruby
      - run: echo "ruby-2.4" > .ruby-version

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # TODO: possibly remove this after the following issue has been fixed:
      # https://github.com/GeekyAnts/NativeBase/issues/1957
      - run: "[ -d node_modules/native-base/dist/src/Utils ] && mv node_modules/native-base/dist/src/Utils node_modules/native-base/dist/src/utils"
      - run: "[ -d node_modules/native-base/src/Utils ] && mv node_modules/native-base/src/Utils node_modules/native-base/src/utils"

      # Remove watchman from node global packages
      - run:
          name: Remove watchman from node global packages
          command: npm r -g watchman

      # Install watchman with brew
      - run:
          name: Install watchman
          command: |
            brew update
            brew install watchman || exit 0

      # Install bundle dependencies
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: *ios_gems_cache_key
          paths:
            - vendor/bundle

      # Fetch CocoaPods specs
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf

      # Re-run postinstall scripts (setup of react-native libs)
      - run: npm run postinstall

      # Install pods
      - run: cd ios && bundle exec pod install --verbose

      # Install Detox and ios-sim utils
      # see: https://github.com/wix/detox/
      - run: npm install -g detox

      # cleanup metro and haste cache
      - run: rm -rf /tmp/metro-bundler-cache-*
      - run: rm -rf /tmp/haste-map-react-native-packager-*

      # Run detox e2e tests
      - run: detox build -c ios.sim.release

      # Save workspace for next jobs in the workflow
      - persist_to_workspace:
          root: /Users/distiller
          paths:
            - italia-app

  # Run end-to-end iOS tests
  test-ios-e2e-run:
    <<: *defaults_macos

    resource_class: large

    steps:
      # Restore workflow workspace
      - attach_workspace:
          at: /Users/distiller

      # Install Detox and ios-sim utils
      # see: https://github.com/wix/detox/
      - run: npm install -g detox ios-sim

      # Install required tools
      # see: https://github.com/wix/detox/blob/master/docs/Guide.RunningOnCI.md
      - run: brew tap wix/brew
      - run: brew install applesimutils

      # Enumerate device types available in simulator
      - run: ios-sim showdevicetypes

      # Start emulator in background
      - run:
          command: ios-sim start --verbose --log /tmp/detox.last_launch_app_log --devicetypeid "iPhone-6, 10.3"
          background: true

      # Run detox e2e tests
      - run: detox test --loglevel verbose -c ios.sim.release --cleanup --artifacts-location /tmp/detox_artifacts/ --record-logs all --take-screenshots all --debug-synchronization 1000

      # store detox artifacts
      - store_artifacts:
          path: /tmp/detox_artifacts

  pagopa_specs_diff:
    docker:
      - image: circleci/android:api-28
    steps:
      - checkout
      - run:
          name: check api specs alignment
          command: ./scripts/pagopa_api_check.sh

  io_check_uris:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: check uris validity on static texts
          command: |
            cd scripts/check_urls
            sudo pip install pipenv
            pipenv install
            pipenv run python3 check_urls.py

workflows:
  version: 2
  build:
    jobs:
      - compile-typescript

      - run-tests

      - lint-typescript

      - run-danger:
          filters:
            branches:
              ignore: master

      # To avoid running too many (long) native builds and tests, this step
      # waits the approval for the Android native tests.
      - hold-android-native:
          type: approval
          requires:
            - compile-typescript
            - run-tests
            - lint-typescript
          filters:
            branches:
              ignore: master

      # Build Android release
      - android-release:
          requires:
            - hold-android-native

      # Native iOS e2e tests
      - hold-ios-e2e-tests:
          type: approval
          requires:
            - compile-typescript
      - test-ios-e2e-build:
          requires:
            - hold-ios-e2e-tests
      - test-ios-e2e-run:
          requires:
            - test-ios-e2e-build

      # Build Android alpha release only on master branch
      #- alpha-release-android:
      #    requires:
      #      - compile-typescript
      #      - run-tests
      #      - lint-typescript
      #    filters:
      #      branches:
      #        only: master
  # nightly workflow to check pagopa specs (runs only on master branch)
  # if prod and dev specs are different
  # a slack notification will be sent on channel #io-status
  nightly-pagopa-specs-check:
    triggers:
      - schedule:
          cron: "0 03 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - pagopa_specs_diff
      - io_check_uris