diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
index 07f73fd..882b722 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
@@ -171,6 +171,10 @@ public class RNCWebChromeClient extends WebChromeClient implements LifecycleEven
             // TODO: RESOURCE_MIDI_SYSEX, RESOURCE_PROTECTED_MEDIA_ID.
             if (androidPermission != null) {
                 if (ContextCompat.checkSelfPermission(this.mWebView.getThemedReactContext(), androidPermission) == PackageManager.PERMISSION_GRANTED) {
+                    if ((androidPermission.equals(Manifest.permission.RECORD_AUDIO) && this.mWebView.getCustomSettings().getMicrophoneAccessDisabled()) ||
+                        (androidPermission.equals(Manifest.permission.CAMERA) && this.mWebView.getCustomSettings().getCameraAccessDisabled())) {
+                        continue;
+                    }
                     grantedPermissions.add(requestedResource);
                 } else {
                     requestedAndroidPermissions.add(androidPermission);
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
index a9694c6..1e7199e 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
@@ -68,6 +68,17 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
     protected boolean nestedScrollEnabled = false;
     protected ProgressChangedFilter progressChangedFilter;
 
+    /**
+     * It is impossibile to override WebView getSettings(), so RNCWebView has getCustomSettings()
+     */
+    private CustomWebSettings customWebSettings;
+    public CustomWebSettings getCustomSettings() {
+      if (customWebSettings == null) {
+        customWebSettings = new CustomWebSettings();
+      }
+      return customWebSettings;
+    }
+
     /**
      * WebView must be created with an context of the current activity
      * <p>
@@ -433,4 +444,25 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
             return waitingForCommandLoadUrl;
         }
     }
+
+    public class CustomWebSettings {
+      private boolean microphoneAccess = true;
+      private boolean cameraAccess = true;
+
+      public boolean getMicrophoneAccessDisabled() {
+        return !microphoneAccess;
+      }
+
+      public boolean getCameraAccessDisabled() {
+        return !cameraAccess;
+      }
+
+      public void setMicrophoneAccessDisabled(boolean b) {
+        microphoneAccess = !b;
+      }
+
+      public void setCameraAccessDisabled(boolean b) {
+        cameraAccess = !b;
+      }
+  }
 }
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
index 1b6ff7a..3afc3b5 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
@@ -58,6 +58,7 @@ class RNCWebViewManagerImpl {
     private val DEFAULT_LACK_PERMISSION_TO_DOWNLOAD_MESSAGE =
         "Cannot download files as permission was denied. Please provide permission to write to storage, in order to download files."
 
+
     fun createRNCWebViewInstance(context: ThemedReactContext): RNCWebView {
         return RNCWebView(context)
     }
@@ -554,6 +555,10 @@ class RNCWebViewManagerImpl {
         setupWebChromeClient(view)
     }
 
+    fun getCustomSettings(viewWrapper: RNCWebViewWrapper): RNCWebView.CustomWebSettings? {
+      return viewWrapper.webView.customSettings
+    }
+
     fun setAndroidLayerType(viewWrapper: RNCWebViewWrapper, layerTypeString: String?) {
         val view = viewWrapper.webView
         val layerType = when (layerTypeString) {
diff --git a/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
index 5bae4aa..701b325 100644
--- a/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -93,6 +93,18 @@ public class RNCWebViewManager extends ViewGroupManager<RNCWebViewWrapper>
         mRNCWebViewManagerImpl.setAllowsProtectedMedia(view, value);
     }
 
+    @Override
+    @ReactProp(name = "androidMicrophoneAccessDisabled")
+    public void setMicrophoneAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.getCustomSettings(view).setMicrophoneAccessDisabled(disabled);
+    }
+
+    @Override
+    @ReactProp(name = "androidCameraAccessDisabled")
+    public void setCameraAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.getCustomSettings(view).setCameraAccessDisabled(disabled);
+    }
+
     @Override
     @ReactProp(name = "androidLayerType")
     public void setAndroidLayerType(RNCWebViewWrapper view, @Nullable String value) {
diff --git a/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
index 709117a..d6f1185 100644
--- a/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -71,6 +71,16 @@ public class RNCWebViewManager extends ViewGroupManager<RNCWebViewWrapper> {
         mRNCWebViewManagerImpl.setAllowsProtectedMedia(view, value);
     }
     
+    @ReactProp(name = "androidMicrophoneAccessDisabled")
+    public void setMicrophoneAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.getCustomSettings(view).setMicrophoneAccessDisabled(disabled);
+    }
+
+    @ReactProp(name = "androidCameraAccessDisabled")
+    public void setCameraAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.getCustomSettings(view).setCameraAccessDisabled(disabled);
+    }
+
     @ReactProp(name = "androidLayerType")
     public void setAndroidLayerType(RNCWebViewWrapper view, @Nullable String value) {
         mRNCWebViewManagerImpl.setAndroidLayerType(view, value);
diff --git a/node_modules/react-native-webview/lib/WebView.android.js b/node_modules/react-native-webview/lib/WebView.android.js
index d75e1c7..9e18d76 100644
--- a/node_modules/react-native-webview/lib/WebView.android.js
+++ b/node_modules/react-native-webview/lib/WebView.android.js
@@ -34,7 +34,7 @@ var resolveAssetSource = Image.resolveAssetSource;
  */
 var uniqueRef = 0;
 var WebViewComponent = forwardRef(function (_a, ref) {
-    var _b = _a.overScrollMode, overScrollMode = _b === void 0 ? 'always' : _b, _c = _a.javaScriptEnabled, javaScriptEnabled = _c === void 0 ? true : _c, _d = _a.thirdPartyCookiesEnabled, thirdPartyCookiesEnabled = _d === void 0 ? true : _d, _e = _a.scalesPageToFit, scalesPageToFit = _e === void 0 ? true : _e, _f = _a.allowsFullscreenVideo, allowsFullscreenVideo = _f === void 0 ? false : _f, _g = _a.allowFileAccess, allowFileAccess = _g === void 0 ? false : _g, _h = _a.saveFormDataDisabled, saveFormDataDisabled = _h === void 0 ? false : _h, _j = _a.cacheEnabled, cacheEnabled = _j === void 0 ? true : _j, _k = _a.androidLayerType, androidLayerType = _k === void 0 ? "none" : _k, _l = _a.originWhitelist, originWhitelist = _l === void 0 ? defaultOriginWhitelist : _l, _m = _a.setSupportMultipleWindows, setSupportMultipleWindows = _m === void 0 ? true : _m, _o = _a.setBuiltInZoomControls, setBuiltInZoomControls = _o === void 0 ? true : _o, _p = _a.setDisplayZoomControls, setDisplayZoomControls = _p === void 0 ? false : _p, _q = _a.nestedScrollEnabled, nestedScrollEnabled = _q === void 0 ? false : _q, startInLoadingState = _a.startInLoadingState, onNavigationStateChange = _a.onNavigationStateChange, onLoadStart = _a.onLoadStart, onError = _a.onError, onLoad = _a.onLoad, onLoadEnd = _a.onLoadEnd, onLoadProgress = _a.onLoadProgress, onHttpErrorProp = _a.onHttpError, onRenderProcessGoneProp = _a.onRenderProcessGone, onMessageProp = _a.onMessage, onOpenWindowProp = _a.onOpenWindow, renderLoading = _a.renderLoading, renderError = _a.renderError, style = _a.style, containerStyle = _a.containerStyle, source = _a.source, nativeConfig = _a.nativeConfig, onShouldStartLoadWithRequestProp = _a.onShouldStartLoadWithRequest, injectedJavaScriptObject = _a.injectedJavaScriptObject, otherProps = __rest(_a, ["overScrollMode", "javaScriptEnabled", "thirdPartyCookiesEnabled", "scalesPageToFit", "allowsFullscreenVideo", "allowFileAccess", "saveFormDataDisabled", "cacheEnabled", "androidLayerType", "originWhitelist", "setSupportMultipleWindows", "setBuiltInZoomControls", "setDisplayZoomControls", "nestedScrollEnabled", "startInLoadingState", "onNavigationStateChange", "onLoadStart", "onError", "onLoad", "onLoadEnd", "onLoadProgress", "onHttpError", "onRenderProcessGone", "onMessage", "onOpenWindow", "renderLoading", "renderError", "style", "containerStyle", "source", "nativeConfig", "onShouldStartLoadWithRequest", "injectedJavaScriptObject"]);
+    var _b = _a.overScrollMode, overScrollMode = _b === void 0 ? 'always' : _b, _c = _a.javaScriptEnabled, javaScriptEnabled = _c === void 0 ? true : _c, _d = _a.thirdPartyCookiesEnabled, thirdPartyCookiesEnabled = _d === void 0 ? true : _d, _e = _a.scalesPageToFit, scalesPageToFit = _e === void 0 ? true : _e, _f = _a.allowsFullscreenVideo, allowsFullscreenVideo = _f === void 0 ? false : _f, _g = _a.allowFileAccess, allowFileAccess = _g === void 0 ? false : _g, _h = _a.saveFormDataDisabled, saveFormDataDisabled = _h === void 0 ? false : _h, _j = _a.cacheEnabled, cacheEnabled = _j === void 0 ? true : _j, _k = _a.androidHardwareAccelerationDisabled, androidHardwareAccelerationDisabled = _k === void 0 ? false : _k, _l = _a.androidLayerType, androidLayerType = _l === void 0 ? "none" : _l, _m = _a.originWhitelist, originWhitelist = _m === void 0 ? defaultOriginWhitelist : _m, _o = _a.setSupportMultipleWindows, setSupportMultipleWindows = _o === void 0 ? true : _o, _p = _a.setBuiltInZoomControls, setBuiltInZoomControls = _p === void 0 ? true : _p, _q = _a.setDisplayZoomControls, setDisplayZoomControls = _q === void 0 ? false : _q, _r = _a.nestedScrollEnabled, nestedScrollEnabled = _r === void 0 ? false : _r, _y = _a.androidMicrophoneAccessDisabled, androidMicrophoneAccessDisabled = _y === void 0 ? false : _y, _z = _a.androidCameraAccessDisabled, androidCameraAccessDisabled = _z === void 0 ? false : _z, startInLoadingState = _a.startInLoadingState, onNavigationStateChange = _a.onNavigationStateChange, onLoadStart = _a.onLoadStart, onError = _a.onError, onLoad = _a.onLoad, onLoadEnd = _a.onLoadEnd, onLoadProgress = _a.onLoadProgress, onHttpErrorProp = _a.onHttpError, onRenderProcessGoneProp = _a.onRenderProcessGone, onMessageProp = _a.onMessage, renderLoading = _a.renderLoading, renderError = _a.renderError, style = _a.style, containerStyle = _a.containerStyle, source = _a.source, nativeConfig = _a.nativeConfig, onShouldStartLoadWithRequestProp = _a.onShouldStartLoadWithRequest, otherProps = __rest(_a, ["overScrollMode", "javaScriptEnabled", "thirdPartyCookiesEnabled", "scalesPageToFit", "allowsFullscreenVideo", "allowFileAccess", "saveFormDataDisabled", "cacheEnabled", "androidHardwareAccelerationDisabled", "androidLayerType", "originWhitelist", "setSupportMultipleWindows", "setBuiltInZoomControls", "setDisplayZoomControls", "nestedScrollEnabled", "androidMicrophoneAccessDisabled", "androidCameraAccessDisabled", "startInLoadingState", "onNavigationStateChange", "onLoadStart", "onError", "onLoad", "onLoadEnd", "onLoadProgress", "onHttpError", "onRenderProcessGone", "onMessage", "renderLoading", "renderError", "style", "containerStyle", "source", "nativeConfig", "onShouldStartLoadWithRequest"]);
     var messagingModuleName = useRef("WebViewMessageHandler".concat(uniqueRef += 1)).current;
     var webViewRef = useRef(null);
     var onShouldStartLoadWithRequestCallback = useCallback(function (shouldStart, url, lockIdentifier) {
@@ -124,7 +124,7 @@ var WebViewComponent = forwardRef(function (_a, ref) {
     var webView = <NativeWebView key="webViewKey" {...otherProps} messagingEnabled={typeof onMessageProp === 'function'} messagingModuleName={messagingModuleName} hasOnScroll={!!otherProps.onScroll} onLoadingError={onLoadingError} onLoadingFinish={onLoadingFinish} onLoadingProgress={onLoadingProgress} onLoadingStart={onLoadingStart} onHttpError={onHttpError} onRenderProcessGone={onRenderProcessGone} onMessage={onMessage} onOpenWindow={onOpenWindow} hasOnOpenWindowEvent={onOpenWindowProp !== undefined} onShouldStartLoadWithRequest={onShouldStartLoadWithRequest} ref={webViewRef} 
     // TODO: find a better way to type this.
     // @ts-expect-error source is old arch
-    source={sourceResolved} newSource={newSource} style={webViewStyles} overScrollMode={overScrollMode} javaScriptEnabled={javaScriptEnabled} thirdPartyCookiesEnabled={thirdPartyCookiesEnabled} scalesPageToFit={scalesPageToFit} allowsFullscreenVideo={allowsFullscreenVideo} allowFileAccess={allowFileAccess} saveFormDataDisabled={saveFormDataDisabled} cacheEnabled={cacheEnabled} androidLayerType={androidLayerType} setSupportMultipleWindows={setSupportMultipleWindows} setBuiltInZoomControls={setBuiltInZoomControls} setDisplayZoomControls={setDisplayZoomControls} nestedScrollEnabled={nestedScrollEnabled} injectedJavaScriptObject={JSON.stringify(injectedJavaScriptObject)} {...nativeConfig === null || nativeConfig === void 0 ? void 0 : nativeConfig.props}/>;
+    source={sourceResolved} newSource={newSource} style={webViewStyles} overScrollMode={overScrollMode} javaScriptEnabled={javaScriptEnabled} thirdPartyCookiesEnabled={thirdPartyCookiesEnabled} scalesPageToFit={scalesPageToFit} allowsFullscreenVideo={allowsFullscreenVideo} allowFileAccess={allowFileAccess} saveFormDataDisabled={saveFormDataDisabled} cacheEnabled={cacheEnabled} androidHardwareAccelerationDisabled={androidHardwareAccelerationDisabled} androidLayerType={androidLayerType} setSupportMultipleWindows={setSupportMultipleWindows} setBuiltInZoomControls={setBuiltInZoomControls} setDisplayZoomControls={setDisplayZoomControls} androidCameraAccessDisabled={androidCameraAccessDisabled} androidMicrophoneAccessDisabled={androidMicrophoneAccessDisabled} nestedScrollEnabled={nestedScrollEnabled} {...nativeConfig === null || nativeConfig === void 0 ? void 0 : nativeConfig.props}/>;
     return (<View style={webViewContainerStyle}>
       {webView}
       {otherView}
diff --git a/node_modules/react-native-webview/lib/WebViewTypes.d.ts b/node_modules/react-native-webview/lib/WebViewTypes.d.ts
index 7c9f3d3..05e7d62 100644
--- a/node_modules/react-native-webview/lib/WebViewTypes.d.ts
+++ b/node_modules/react-native-webview/lib/WebViewTypes.d.ts
@@ -808,6 +808,18 @@ export interface AndroidWebViewProps extends WebViewSharedProps {
      * @platform android
      */
     setSupportMultipleWindows?: boolean;
+    /**
+     * Boolean value to always forbid access to the microphone in the `WebView`, even if the app
+     * was granted the necessary Android permission. The default value is `false` for backward-compatibility.
+     * @platform android
+     */
+    androidMicrophoneAccessDisabled?: boolean;
+    /**
+     * Boolean value to always forbid access to the camera in the `WebView`, even if the app
+     * was granted the necessary Android permission. The default value is `false` for backward-compatibility.
+     * @platform android
+     */
+    androidCameraAccessDisabled?: boolean;
     /**
      * https://developer.android.com/reference/android/webkit/WebView#setLayerType(int,%20android.graphics.Paint)
      * Sets the layerType. Possible values are:
