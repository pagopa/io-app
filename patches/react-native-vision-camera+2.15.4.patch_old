diff --git a/node_modules/react-native-vision-camera/android/build.gradle b/node_modules/react-native-vision-camera/android/build.gradle
index 91e64d9..b603c98 100644
--- a/node_modules/react-native-vision-camera/android/build.gradle
+++ b/node_modules/react-native-vision-camera/android/build.gradle
@@ -290,9 +290,9 @@ dependencies {
 
     if (REACT_NATIVE_VERSION < 71) {
       //noinspection GradleDynamicVersion
-      extractHeaders("com.facebook.fbjni:fbjni:+:headers")
+      extractHeaders("com.facebook.fbjni:fbjni:0.4.0:headers")
       //noinspection GradleDynamicVersion
-      extractJNI("com.facebook.fbjni:fbjni:+")
+      extractJNI("com.facebook.fbjni:fbjni:0.4.0")
 
       def rnAarMatcher = "**/react-native/**/*${resolveBuildType()}.aar"
       if (REACT_NATIVE_VERSION < 69) {
diff --git a/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift b/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift
index 5c9b77d..810e518 100644
--- a/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift
+++ b/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift
@@ -195,14 +195,14 @@ extension CameraView {
           device.automaticallyEnablesLowLightBoostWhenAvailable = lowLightBoost!.boolValue
         }
       }
-      if let colorSpace = colorSpace as String? {
-        guard let avColorSpace = try? AVCaptureColorSpace(string: colorSpace),
-              device.activeFormat.supportedColorSpaces.contains(avColorSpace) else {
-          invokeOnError(.format(.invalidColorSpace(colorSpace: colorSpace)))
-          return
-        }
-        device.activeColorSpace = avColorSpace
-      }
+      // if let colorSpace = colorSpace as String? {
+      //  guard let avColorSpace = try? AVCaptureColorSpace(string: colorSpace),
+      //        device.activeFormat.supportedColorSpaces.contains(avColorSpace) else {
+      //    invokeOnError(.format(.invalidColorSpace(colorSpace: colorSpace)))
+      //    return
+      //  }
+      //  device.activeColorSpace = avColorSpace
+      // }
 
       device.unlockForConfiguration()
       ReactLogger.log(level: .info, message: "Device successfully configured!")
diff --git a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift
index 35789a6..036389b 100644
--- a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift
+++ b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift
@@ -54,13 +54,13 @@ extension AVCaptureDevice.Format {
         return false
       }
     }
-    if let colorSpaces = filter.value(forKey: "colorSpaces") as? [String] {
-      let avColorSpaces = colorSpaces.map { try? AVCaptureColorSpace(string: $0) }
-      let allColorSpacesIncluded = supportedColorSpaces.allSatisfy { avColorSpaces.contains($0) }
-      if !allColorSpacesIncluded {
-        return false
-      }
-    }
+    // if let colorSpaces = filter.value(forKey: "colorSpaces") as? [String] {
+    //  let avColorSpaces = colorSpaces.map { try? AVCaptureColorSpace(string: $0) }
+    //  let allColorSpacesIncluded = supportedColorSpaces.allSatisfy { avColorSpaces.contains($0) }
+    //  if !allColorSpacesIncluded {
+    //    return false
+    //  }
+    // }
     if let frameRateRanges = filter.value(forKey: "frameRateRanges") as? [NSDictionary] {
       let allFrameRateRangesIncluded = videoSupportedFrameRateRanges.allSatisfy { range -> Bool in
         frameRateRanges.contains { dict -> Bool in
diff --git a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift
index fec83ca..f7bce0e 100644
--- a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift
+++ b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift
@@ -33,7 +33,7 @@ extension AVCaptureDevice.Format {
       "minISO": minISO,
       "fieldOfView": videoFieldOfView,
       "maxZoom": videoMaxZoomFactor,
-      "colorSpaces": supportedColorSpaces.map(\.descriptor),
+      // "colorSpaces": supportedColorSpaces.map(\.descriptor),
       "supportsVideoHDR": isVideoHDRSupported,
       "supportsPhotoHDR": false,
       "frameRateRanges": videoSupportedFrameRateRanges.map {
diff --git a/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift b/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift
index 13a403b..3d8831e 100644
--- a/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift
+++ b/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift
@@ -1,3 +1,4 @@
+// Removed support for colorSpace and this field is removed in vision-camera v3 and once stablized we'll migrate
 //
 //  AVCaptureColorSpace+descriptor.swift
 //  mrousavy
@@ -6,39 +7,39 @@
 //  Copyright Â© 2020 mrousavy. All rights reserved.
 //
 
-import AVFoundation
+// import AVFoundation
 
-extension AVCaptureColorSpace {
-  init(string: String) throws {
-    switch string {
-    case "hlg-bt2020":
-      if #available(iOS 14.1, *) {
-        self = .HLG_BT2020
-      } else {
-        throw EnumParserError.unsupportedOS(supportedOnOS: "14.1")
-      }
-      return
-    case "p3-d65":
-      self = .P3_D65
-      return
-    case "srgb":
-      self = .sRGB
-      return
-    default:
-      throw EnumParserError.invalidValue
-    }
-  }
+// extension AVCaptureColorSpace {
+//  init(string: String) throws {
+//    switch string {
+//    case "hlg-bt2020":
+//      if #available(iOS 14.1, *) {
+//        self = .HLG_BT2020
+//      } else {
+//        throw EnumParserError.unsupportedOS(supportedOnOS: "14.1")
+//      }
+//      return
+//    case "p3-d65":
+//      self = .P3_D65
+//      return
+//    case "srgb":
+//      self = .sRGB
+//      return
+//    default:
+//      throw EnumParserError.invalidValue
+//    }
+//  }
 
-  var descriptor: String {
-    switch self {
-    case .HLG_BT2020:
-      return "hlg-bt2020"
-    case .P3_D65:
-      return "p3-d65"
-    case .sRGB:
-      return "srgb"
-    default:
-      fatalError("AVCaptureDevice.Position has unknown state.")
-    }
-  }
-}
+//  var descriptor: String {
+//    switch self {
+//    case .HLG_BT2020:
+//      return "hlg-bt2020"
+//    case .P3_D65:
+//      return "p3-d65"
+//    case .sRGB:
+//      return "srgb"
+//    default:
+//      fatalError("AVCaptureDevice.Position has unknown state.")
+//    }
+//  }
+// }
