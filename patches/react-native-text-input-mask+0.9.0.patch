patch-package
diff --git a/node_modules/react-native-text-input-mask/android/src/main/java/com/RNTextInputMask/RNTextInputMaskModule.java b/node_modules/react-native-text-input-mask/android/src/main/java/com/RNTextInputMask/RNTextInputMaskModule.java
index 877ab4e..b47c056 100644
--- a/node_modules/react-native-text-input-mask/android/src/main/java/com/RNTextInputMask/RNTextInputMaskModule.java
+++ b/node_modules/react-native-text-input-mask/android/src/main/java/com/RNTextInputMask/RNTextInputMaskModule.java
@@ -1,6 +1,9 @@
 package com.RNTextInputMask;
 
 import android.app.Activity;
+import android.os.Build;
+import android.text.InputType;
+import android.text.method.PasswordTransformationMethod;
 import android.widget.EditText;
 import android.text.TextWatcher;
 import com.facebook.react.uimanager.UIManagerModule;
@@ -67,7 +70,7 @@ public class RNTextInputMaskModule extends ReactContextBaseJavaModule {
     }
 
     @ReactMethod
-    public void setMask(final int tag, final String mask) {
+    public void setMask(final int tag, final String mask, final boolean isNumericSecureKeyboard) {
         // We need to use prependUIBlock instead of addUIBlock since subsequent UI operations in
         // the queue might be removing the view we're looking to update.
         reactContext.getNativeModule(UIManagerModule.class).prependUIBlock(new UIBlock() {
@@ -92,6 +95,12 @@ public class RNTextInputMaskModule extends ReactContextBaseJavaModule {
                             editText.removeTextChangedListener((TextWatcher) editText.getTag());
                         }
 
+                        if (isNumericSecureKeyboard) {
+                            editText.setTransformationMethod(null);
+                            editText.setInputType(InputType.TYPE_CLASS_NUMBER);
+                            editText.setTransformationMethod(new PasswordTransformationMethod());
+                        }
+
                         editText.setTag(listener);
                         editText.addTextChangedListener(listener);
                     }
@@ -99,4 +108,5 @@ public class RNTextInputMaskModule extends ReactContextBaseJavaModule {
             }
         });
     }
+
 }
diff --git a/node_modules/react-native-text-input-mask/index.js b/node_modules/react-native-text-input-mask/index.js
index 408edad..6f57caa 100644
--- a/node_modules/react-native-text-input-mask/index.js
+++ b/node_modules/react-native-text-input-mask/index.js
@@ -10,6 +10,7 @@ import {
 const mask = NativeModules.RNTextInputMask.mask
 const unmask = NativeModules.RNTextInputMask.unmask
 const setMask = NativeModules.RNTextInputMask.setMask
+const setText = NativeModules.RNTextInputMask.setText
 export { mask, unmask, setMask }
 
 export default class TextInputMask extends Component {
@@ -30,7 +31,11 @@ export default class TextInputMask extends Component {
 
     if (this.props.mask && !this.masked) {
       this.masked = true
-      setMask(findNodeHandle(this.input), this.props.mask)
+      if(Platform.OS === "android") {
+        setMask(findNodeHandle(this.input), this.props.mask, this.props.isNumericSecureKeyboard === true)
+      } else {
+        setMask(findNodeHandle(this.input), this.props.mask)
+      }
     }
   }
 
@@ -42,7 +47,11 @@ export default class TextInputMask extends Component {
     }
 
     if (this.props.mask !== nextProps.mask) {
-      setMask(findNodeHandle(this.input), nextProps.mask)
+      if(Platform.OS === "android") {
+        setMask(findNodeHandle(this.input), this.props.mask, this.props.isNumericSecureKeyboard === true)
+      } else {
+        setMask(findNodeHandle(this.input), this.props.mask)
+      }
     }
   }
 
@@ -68,4 +77,13 @@ export default class TextInputMask extends Component {
       }}
     />);
   }
+
+  clear() {
+    if (Platform.OS === 'ios') {
+      setText(findNodeHandle(this.input), '');
+    } else {
+      this.input.setNativeProps({ text: '' });
+    }
+    this.props.onChangeText('');
+  }
 }
diff --git a/node_modules/react-native-text-input-mask/ios/RNTextInputMask/RNTextInputMask/RNTextInputMask.m b/node_modules/react-native-text-input-mask/ios/RNTextInputMask/RNTextInputMask/RNTextInputMask.m
index b978272..ed9c93e 100644
--- a/node_modules/react-native-text-input-mask/ios/RNTextInputMask/RNTextInputMask/RNTextInputMask.m
+++ b/node_modules/react-native-text-input-mask/ios/RNTextInputMask/RNTextInputMask/RNTextInputMask.m
@@ -59,6 +59,16 @@ - (dispatch_queue_t)methodQueue {
     }];
 }
 
+RCT_EXPORT_METHOD(setText:(nonnull NSNumber *)reactNode text:(NSString *)text){
+    [self.bridge.uiManager addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *, RCTSinglelineTextInputView *> *viewRegistry ) {
+        dispatch_async(dispatch_get_main_queue(), ^{
+            RCTSinglelineTextInputView *view = viewRegistry[reactNode];
+            UIView<RCTBackedTextInputViewProtocol>  *textView = [view backedTextInputView];
+            [textView setAttributedText:[[NSAttributedString alloc] initWithString:text]];
+        });
+    }];
+}
+
 - (void)textField:(RCTUITextField *)textField didFillMandatoryCharacters:(BOOL)complete didExtractValue:(NSString *)value
 {
     [self.bridge.eventDispatcher sendTextEventWithType:RCTTextEventTypeChange
