diff --git a/node_modules/react-native-webview/.DS_Store b/node_modules/react-native-webview/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
index 07f73fd..882b722 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebChromeClient.java
@@ -171,6 +171,10 @@ public class RNCWebChromeClient extends WebChromeClient implements LifecycleEven
             // TODO: RESOURCE_MIDI_SYSEX, RESOURCE_PROTECTED_MEDIA_ID.
             if (androidPermission != null) {
                 if (ContextCompat.checkSelfPermission(this.mWebView.getThemedReactContext(), androidPermission) == PackageManager.PERMISSION_GRANTED) {
+                    if ((androidPermission.equals(Manifest.permission.RECORD_AUDIO) && this.mWebView.getCustomSettings().getMicrophoneAccessDisabled()) ||
+                        (androidPermission.equals(Manifest.permission.CAMERA) && this.mWebView.getCustomSettings().getCameraAccessDisabled())) {
+                        continue;
+                    }
                     grantedPermissions.add(requestedResource);
                 } else {
                     requestedAndroidPermissions.add(androidPermission);
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
index 80c6803..27c8d00 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
@@ -79,6 +79,16 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
     protected boolean nestedScrollEnabled = false;
     protected ProgressChangedFilter progressChangedFilter;
 
+    /**
+     * It is impossibile to override WebView getSettings(), so RNCWebView has getCustomSettings()
+     */
+    private CustomWebSettings customWebSettings;
+    public CustomWebSettings getCustomSettings() {
+        if (customWebSettings == null) {
+            customWebSettings = new CustomWebSettings();
+        }
+        return customWebSettings;
+    }
     /**
      * WebView must be created with an context of the current activity
      * <p>
@@ -465,4 +475,25 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
             return waitingForCommandLoadUrl;
         }
     }
+
+    public class CustomWebSettings {
+        private boolean microphoneAccess = true;
+        private boolean cameraAccess = true;
+
+        public boolean getMicrophoneAccessDisabled() {
+            return !microphoneAccess;
+        }
+
+        public boolean getCameraAccessDisabled() {
+            return !cameraAccess;
+        }
+
+        public void setMicrophoneAccessDisabled(boolean b) {
+            microphoneAccess = !b;
+        }
+
+        public void setCameraAccessDisabled(boolean b) {
+            cameraAccess = !b;
+        }
+    }
 }
\ No newline at end of file
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
index f83033b..dc8292a 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
@@ -563,6 +563,18 @@ class RNCWebViewManagerImpl(private val newArch: Boolean = false) {
         setupWebChromeClient(view)
     }
 
+    fun setMicrophoneAccessDisabled(viewWrapper: RNCWebViewWrapper, value: Boolean) {
+        getCustomSettings(viewWrapper)?.setMicrophoneAccessDisabled(value)
+    }
+
+    fun setCameraAccessDisabled(viewWrapper: RNCWebViewWrapper, value: Boolean) {
+        getCustomSettings(viewWrapper)?.setCameraAccessDisabled(value)
+    }
+
+    fun getCustomSettings(viewWrapper: RNCWebViewWrapper): RNCWebView.CustomWebSettings? {
+        return viewWrapper.webView.customSettings
+    }
+
     fun setAndroidLayerType(viewWrapper: RNCWebViewWrapper, layerTypeString: String?) {
         val view = viewWrapper.webView
         val layerType = when (layerTypeString) {
diff --git a/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
index 4709e28..79715f0 100644
--- a/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -94,6 +94,18 @@ public class RNCWebViewManager extends ViewGroupManager<RNCWebViewWrapper>
         mRNCWebViewManagerImpl.setAllowsProtectedMedia(view, value);
     }
 
+    @Override
+    @ReactProp(name = "androidMicrophoneAccessDisabled")
+    public void setMicrophoneAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.setMicrophoneAccessDisabled(view, disabled);
+    }
+
+    @Override
+    @ReactProp(name = "androidCameraAccessDisabled")
+    public void setCameraAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.setCameraAccessDisabled(view, disabled);
+    }
+
     @Override
     @ReactProp(name = "androidLayerType")
     public void setAndroidLayerType(RNCWebViewWrapper view, @Nullable String value) {
diff --git a/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
index 974337f..b1bb367 100644
--- a/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -72,6 +72,16 @@ public class RNCWebViewManager extends ViewGroupManager<RNCWebViewWrapper> {
         mRNCWebViewManagerImpl.setAllowsProtectedMedia(view, value);
     }
 
+    @ReactProp(name = "androidMicrophoneAccessDisabled")
+    public void setMicrophoneAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.setMicrophoneAccessDisabled(view, disabled);
+    }
+
+    @ReactProp(name = "androidCameraAccessDisabled")
+    public void setCameraAccessDisabled(RNCWebViewWrapper view, boolean disabled) {
+        mRNCWebViewManagerImpl.setCameraAccessDisabled(view, disabled);
+    }
+
     @ReactProp(name = "androidLayerType")
     public void setAndroidLayerType(RNCWebViewWrapper view, @Nullable String value) {
         mRNCWebViewManagerImpl.setAndroidLayerType(view, value);
diff --git a/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.d.ts b/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.d.ts
index 8dd6cef..02e50ca 100644
--- a/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.d.ts
+++ b/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.d.ts
@@ -117,6 +117,8 @@ export interface NativeProps extends ViewProps {
     allowsProtectedMedia?: boolean;
     allowsFullscreenVideo?: boolean;
     androidLayerType?: WithDefault<'none' | 'software' | 'hardware', 'none'>;
+    androidMicrophoneAccessDisabled?: boolean;
+    androidCameraAccessDisabled?: boolean;
     cacheMode?: WithDefault<'LOAD_DEFAULT' | 'LOAD_CACHE_ELSE_NETWORK' | 'LOAD_NO_CACHE' | 'LOAD_CACHE_ONLY', 'LOAD_DEFAULT'>;
     domStorageEnabled?: boolean;
     downloadingMessage?: string;
diff --git a/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.js b/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.js
index 25d09e9..1d94e78 100644
--- a/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.js
+++ b/node_modules/react-native-webview/lib/RNCWebViewNativeComponent.js
@@ -1 +1 @@
-var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.__INTERNAL_VIEW_CONFIG=exports.Commands=void 0;var _codegenNativeComponent=_interopRequireDefault(require("react-native/Libraries/Utilities/codegenNativeComponent"));var _codegenNativeCommands=_interopRequireDefault(require("react-native/Libraries/Utilities/codegenNativeCommands"));var NativeComponentRegistry=require('react-native/Libraries/NativeComponent/NativeComponentRegistry');var _require=require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),ConditionallyIgnoredEventHandlers=_require.ConditionallyIgnoredEventHandlers;var _require2=require("react-native/Libraries/ReactNative/RendererProxy"),dispatchCommand=_require2.dispatchCommand;var nativeComponentName='RNCWebView';var __INTERNAL_VIEW_CONFIG=exports.__INTERNAL_VIEW_CONFIG={uiViewClassName:'RNCWebView',directEventTypes:{topContentSizeChange:{registrationName:'onContentSizeChange'},topRenderProcessGone:{registrationName:'onRenderProcessGone'},topContentProcessDidTerminate:{registrationName:'onContentProcessDidTerminate'},topCustomMenuSelection:{registrationName:'onCustomMenuSelection'},topFileDownload:{registrationName:'onFileDownload'},topLoadingError:{registrationName:'onLoadingError'},topLoadingSubResourceError:{registrationName:'onLoadingSubResourceError'},topLoadingFinish:{registrationName:'onLoadingFinish'},topLoadingProgress:{registrationName:'onLoadingProgress'},topLoadingStart:{registrationName:'onLoadingStart'},topHttpError:{registrationName:'onHttpError'},topMessage:{registrationName:'onMessage'},topOpenWindow:{registrationName:'onOpenWindow'},topScroll:{registrationName:'onScroll'},topShouldStartLoadWithRequest:{registrationName:'onShouldStartLoadWithRequest'}},validAttributes:Object.assign({allowFileAccess:true,allowsProtectedMedia:true,allowsFullscreenVideo:true,androidLayerType:true,cacheMode:true,domStorageEnabled:true,downloadingMessage:true,forceDarkOn:true,geolocationEnabled:true,lackPermissionToDownloadMessage:true,messagingModuleName:true,minimumFontSize:true,mixedContentMode:true,nestedScrollEnabled:true,overScrollMode:true,saveFormDataDisabled:true,scalesPageToFit:true,setBuiltInZoomControls:true,setDisplayZoomControls:true,setSupportMultipleWindows:true,textZoom:true,thirdPartyCookiesEnabled:true,hasOnScroll:true,allowingReadAccessToURL:true,allowsBackForwardNavigationGestures:true,allowsInlineMediaPlayback:true,allowsPictureInPictureMediaPlayback:true,allowsAirPlayForMediaPlayback:true,allowsLinkPreview:true,automaticallyAdjustContentInsets:true,autoManageStatusBarEnabled:true,bounces:true,contentInset:true,contentInsetAdjustmentBehavior:true,contentMode:true,dataDetectorTypes:true,decelerationRate:true,directionalLockEnabled:true,enableApplePay:true,hideKeyboardAccessoryView:true,keyboardDisplayRequiresUserAction:true,limitsNavigationsToAppBoundDomains:true,mediaCapturePermissionGrantType:true,pagingEnabled:true,pullToRefreshEnabled:true,refreshControlLightMode:true,scrollEnabled:true,sharedCookiesEnabled:true,textInteractionEnabled:true,useSharedProcessPool:true,menuItems:true,suppressMenuItems:true,hasOnFileDownload:true,fraudulentWebsiteWarningEnabled:true,allowFileAccessFromFileURLs:true,allowUniversalAccessFromFileURLs:true,applicationNameForUserAgent:true,basicAuthCredential:true,cacheEnabled:true,incognito:true,injectedJavaScript:true,injectedJavaScriptBeforeContentLoaded:true,injectedJavaScriptForMainFrameOnly:true,injectedJavaScriptBeforeContentLoadedForMainFrameOnly:true,javaScriptCanOpenWindowsAutomatically:true,javaScriptEnabled:true,webviewDebuggingEnabled:true,mediaPlaybackRequiresUserAction:true,messagingEnabled:true,hasOnOpenWindowEvent:true,showsHorizontalScrollIndicator:true,showsVerticalScrollIndicator:true,indicatorStyle:true,newSource:true,userAgent:true,injectedJavaScriptObject:true,paymentRequestEnabled:true},ConditionallyIgnoredEventHandlers({onContentSizeChange:true,onRenderProcessGone:true,onContentProcessDidTerminate:true,onCustomMenuSelection:true,onFileDownload:true,onLoadingError:true,onLoadingSubResourceError:true,onLoadingFinish:true,onLoadingProgress:true,onLoadingStart:true,onHttpError:true,onMessage:true,onOpenWindow:true,onScroll:true,onShouldStartLoadWithRequest:true}))};var _default=exports.default=NativeComponentRegistry.get(nativeComponentName,function(){return __INTERNAL_VIEW_CONFIG;});var Commands=exports.Commands={goBack:function goBack(ref){dispatchCommand(ref,"goBack",[]);},goForward:function goForward(ref){dispatchCommand(ref,"goForward",[]);},reload:function reload(ref){dispatchCommand(ref,"reload",[]);},stopLoading:function stopLoading(ref){dispatchCommand(ref,"stopLoading",[]);},injectJavaScript:function injectJavaScript(ref,javascript){dispatchCommand(ref,"injectJavaScript",[javascript]);},requestFocus:function requestFocus(ref){dispatchCommand(ref,"requestFocus",[]);},postMessage:function postMessage(ref,data){dispatchCommand(ref,"postMessage",[data]);},loadUrl:function loadUrl(ref,url){dispatchCommand(ref,"loadUrl",[url]);},clearFormData:function clearFormData(ref){dispatchCommand(ref,"clearFormData",[]);},clearCache:function clearCache(ref,includeDiskFiles){dispatchCommand(ref,"clearCache",[includeDiskFiles]);},clearHistory:function clearHistory(ref){dispatchCommand(ref,"clearHistory",[]);}};
\ No newline at end of file
+var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.__INTERNAL_VIEW_CONFIG=exports.Commands=void 0;var _codegenNativeComponent=_interopRequireDefault(require("react-native/Libraries/Utilities/codegenNativeComponent")),_codegenNativeCommands=_interopRequireDefault(require("react-native/Libraries/Utilities/codegenNativeCommands")),NativeComponentRegistry=require("react-native/Libraries/NativeComponent/NativeComponentRegistry"),_require=require("react-native/Libraries/NativeComponent/ViewConfigIgnore"),ConditionallyIgnoredEventHandlers=_require.ConditionallyIgnoredEventHandlers,_require2=require("react-native/Libraries/ReactNative/RendererProxy"),dispatchCommand=_require2.dispatchCommand,nativeComponentName="RNCWebView",__INTERNAL_VIEW_CONFIG=exports.__INTERNAL_VIEW_CONFIG={uiViewClassName:"RNCWebView",directEventTypes:{topContentSizeChange:{registrationName:"onContentSizeChange"},topRenderProcessGone:{registrationName:"onRenderProcessGone"},topContentProcessDidTerminate:{registrationName:"onContentProcessDidTerminate"},topCustomMenuSelection:{registrationName:"onCustomMenuSelection"},topFileDownload:{registrationName:"onFileDownload"},topLoadingError:{registrationName:"onLoadingError"},topLoadingSubResourceError:{registrationName:"onLoadingSubResourceError"},topLoadingFinish:{registrationName:"onLoadingFinish"},topLoadingProgress:{registrationName:"onLoadingProgress"},topLoadingStart:{registrationName:"onLoadingStart"},topHttpError:{registrationName:"onHttpError"},topMessage:{registrationName:"onMessage"},topOpenWindow:{registrationName:"onOpenWindow"},topScroll:{registrationName:"onScroll"},topShouldStartLoadWithRequest:{registrationName:"onShouldStartLoadWithRequest"}},validAttributes:Object.assign({allowFileAccess:!0,allowsProtectedMedia:!0,allowsFullscreenVideo:!0,androidLayerType:!0,androidMicrophoneAccessDisabled:!0,androidCameraAccessDisabled:!0,cacheMode:!0,domStorageEnabled:!0,downloadingMessage:!0,forceDarkOn:!0,geolocationEnabled:!0,lackPermissionToDownloadMessage:!0,messagingModuleName:!0,minimumFontSize:!0,mixedContentMode:!0,nestedScrollEnabled:!0,overScrollMode:!0,saveFormDataDisabled:!0,scalesPageToFit:!0,setBuiltInZoomControls:!0,setDisplayZoomControls:!0,setSupportMultipleWindows:!0,textZoom:!0,thirdPartyCookiesEnabled:!0,hasOnScroll:!0,allowingReadAccessToURL:!0,allowsBackForwardNavigationGestures:!0,allowsInlineMediaPlayback:!0,allowsPictureInPictureMediaPlayback:!0,allowsAirPlayForMediaPlayback:!0,allowsLinkPreview:!0,automaticallyAdjustContentInsets:!0,autoManageStatusBarEnabled:!0,bounces:!0,contentInset:!0,contentInsetAdjustmentBehavior:!0,contentMode:!0,dataDetectorTypes:!0,decelerationRate:!0,directionalLockEnabled:!0,enableApplePay:!0,hideKeyboardAccessoryView:!0,keyboardDisplayRequiresUserAction:!0,limitsNavigationsToAppBoundDomains:!0,mediaCapturePermissionGrantType:!0,pagingEnabled:!0,pullToRefreshEnabled:!0,refreshControlLightMode:!0,scrollEnabled:!0,sharedCookiesEnabled:!0,textInteractionEnabled:!0,useSharedProcessPool:!0,menuItems:!0,suppressMenuItems:!0,hasOnFileDownload:!0,fraudulentWebsiteWarningEnabled:!0,allowFileAccessFromFileURLs:!0,allowUniversalAccessFromFileURLs:!0,applicationNameForUserAgent:!0,basicAuthCredential:!0,cacheEnabled:!0,incognito:!0,injectedJavaScript:!0,injectedJavaScriptBeforeContentLoaded:!0,injectedJavaScriptForMainFrameOnly:!0,injectedJavaScriptBeforeContentLoadedForMainFrameOnly:!0,javaScriptCanOpenWindowsAutomatically:!0,javaScriptEnabled:!0,webviewDebuggingEnabled:!0,mediaPlaybackRequiresUserAction:!0,messagingEnabled:!0,hasOnOpenWindowEvent:!0,showsHorizontalScrollIndicator:!0,showsVerticalScrollIndicator:!0,indicatorStyle:!0,newSource:!0,userAgent:!0,injectedJavaScriptObject:!0,paymentRequestEnabled:!0},ConditionallyIgnoredEventHandlers({onContentSizeChange:!0,onRenderProcessGone:!0,onContentProcessDidTerminate:!0,onCustomMenuSelection:!0,onFileDownload:!0,onLoadingError:!0,onLoadingSubResourceError:!0,onLoadingFinish:!0,onLoadingProgress:!0,onLoadingStart:!0,onHttpError:!0,onMessage:!0,onOpenWindow:!0,onScroll:!0,onShouldStartLoadWithRequest:!0}))},_default=exports.default=NativeComponentRegistry.get(nativeComponentName,(function(){return __INTERNAL_VIEW_CONFIG})),Commands=exports.Commands={goBack:function(e){dispatchCommand(e,"goBack",[])},goForward:function(e){dispatchCommand(e,"goForward",[])},reload:function(e){dispatchCommand(e,"reload",[])},stopLoading:function(e){dispatchCommand(e,"stopLoading",[])},injectJavaScript:function(e,o){dispatchCommand(e,"injectJavaScript",[o])},requestFocus:function(e){dispatchCommand(e,"requestFocus",[])},postMessage:function(e,o){dispatchCommand(e,"postMessage",[o])},loadUrl:function(e,o){dispatchCommand(e,"loadUrl",[o])},clearFormData:function(e){dispatchCommand(e,"clearFormData",[])},clearCache:function(e,o){dispatchCommand(e,"clearCache",[o])},clearHistory:function(e){dispatchCommand(e,"clearHistory",[])}};
\ No newline at end of file
diff --git a/node_modules/react-native-webview/lib/WebViewTypes.d.ts b/node_modules/react-native-webview/lib/WebViewTypes.d.ts
index 998cc88..669b326 100644
--- a/node_modules/react-native-webview/lib/WebViewTypes.d.ts
+++ b/node_modules/react-native-webview/lib/WebViewTypes.d.ts
@@ -844,6 +844,18 @@ export interface AndroidWebViewProps extends WebViewSharedProps {
      * @platform android
      */
     setSupportMultipleWindows?: boolean;
+    /**
+     * Boolean value to always forbid access to the microphone in the `WebView`, even if the app
+     * was granted the necessary Android permission. The default value is `false` for backward-compatibility.
+     * @platform android
+     */
+    androidMicrophoneAccessDisabled?: boolean;
+    /**
+     * Boolean value to always forbid access to the camera in the `WebView`, even if the app
+     * was granted the necessary Android permission. The default value is `false` for backward-compatibility.
+     * @platform android
+     */
+    androidCameraAccessDisabled?: boolean;
     /**
      * https://developer.android.com/reference/android/webkit/WebView#setLayerType(int,%20android.graphics.Paint)
      * Sets the layerType. Possible values are:
diff --git a/node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts b/node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts
index 7f4e6c4..af33a1d 100644
--- a/node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts
+++ b/node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts
@@ -148,6 +148,8 @@ export interface NativeProps extends ViewProps {
   allowsProtectedMedia?: boolean;
   allowsFullscreenVideo?: boolean;
   androidLayerType?: WithDefault<'none' | 'software' | 'hardware', 'none'>;
+  androidMicrophoneAccessDisabled?: boolean;
+  androidCameraAccessDisabled?: boolean;
   cacheMode?: WithDefault<
     | 'LOAD_DEFAULT'
     | 'LOAD_CACHE_ELSE_NETWORK'
