/* eslint-disable no-console */
import { exec } from "child_process";
import * as t from "io-ts";
import { readableReport } from "italia-ts-commons/lib/reporters";

interface IMinMaxArray<T> extends Array<T> {
  readonly minMaxArray: unique symbol;
}

const minMaxArray = <C extends t.Mixed>(min: number, max: number, a: C) =>
  t.brand(
    t.array(a),
    (n: Array<C>): n is t.Branded<Array<C>, IMinMaxArray<C>> =>
      min <= n.length && n.length <= max,
    "minMaxArray"
  );

/**
 * The row format generated by yarn outdated --json
 * 0: Package name
 * 1: Current Version
 * 2: Wanted Version
 * 3: Latest available version
 * 4: Package Type (devDependencies, dependencies, resolutionDependencies)
 * 5: Package URL
 */
const Row = minMaxArray(6, 6, t.string);

const Data = t.interface({
  body: t.readonlyArray(Row)
});

const DependenciesTable = t.interface({
  type: t.string,
  data: Data
});

export type DependenciesTable = t.TypeOf<typeof DependenciesTable>;

const main = () => {
  exec("yarn outdated --json", (error, stdout, stderr) => {
    if (error?.code !== undefined && error.code !== 1) {
      console.log(`error: ${error.message} + ${error.code} +  ${error.name}`);
      return;
    }
    if (stderr) {
      console.log(`stderr: ${stderr}`);
      return;
    }

    const outdatedJson = JSON.parse(stdout.split("\n")[1]);
    const outdatedPackages = DependenciesTable.decode(outdatedJson);

    if (outdatedPackages.isRight()) {
      console.log(outdatedPackages.value.data.body.length);
    } else {
      console.log("Error while decoding the command output");
      console.log(readableReport(outdatedPackages.value));
    }
  });
};

main();
