/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    "env": {
        "browser": true,
        "es6": true,
        "node": true
    },
    "extends": [
        "prettier",
        "prettier/@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "tsconfig.json",
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint",
        "@typescript-eslint/tslint"
    ],
    "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
            "error",
            {
                "default": "array-simple"
            }
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "Object": {
                        "message": "Avoid using the `Object` type. Did you mean `object`?"
                    },
                    "Function": {
                        "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
                    },
                    "Boolean": {
                        "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
                    },
                    "Number": {
                        "message": "Avoid using the `Number` type. Did you mean `number`?"
                    },
                    "String": {
                        "message": "Avoid using the `String` type. Did you mean `string`?"
                    },
                    "Symbol": {
                        "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
                    }
                }
            }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                "accessibility": "explicit"
            }
        ],
        "@typescript-eslint/member-delimiter-style": [
            "off",
            {
                "multiline": {
                    "delimiter": "none",
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi",
                    "requireLast": false
                }
            }
        ],
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/naming-convention": "error",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/semi": [
            "off",
            null
        ],
        "@typescript-eslint/triple-slash-reference": [
            "error",
            {
                "path": "always",
                "types": "prefer-import",
                "lib": "always"
            }
        ],
        "@typescript-eslint/tslint/config": [
            "error",
            {
                "rules": {
                    "arguments-order": true,
                    "bool-param-default": true,
                    "cognitive-complexity": true,
                    "consecutive-overloads": true,
                    "jsx-alignment": true,
                    "jsx-no-string-ref": true,
                    "jsx-self-close": true,
                    "max-switch-cases": true,
                    "max-union-size": true,
                    "no-accessor-field-mismatch": true,
                    "no-all-duplicated-branches": true,
                    "no-alphabetical-sort": true,
                    "no-array-delete": true,
                    "no-big-function": true,
                    "no-case-with-or": true,
                    "no-collapsible-if": true,
                    "no-collection-size-mischeck": true,
                    "no-commented-code": true,
                    "no-dead-store": true,
                    "no-duplicate-in-composite": true,
                    "no-duplicated-branches": true,
                    "no-element-overwrite": true,
                    "no-empty-array": true,
                    "no-empty-destructuring": true,
                    "no-extra-semicolon": true,
                    "no-gratuitous-expressions": true,
                    "no-hardcoded-credentials": true,
                    "no-identical-conditions": true,
                    "no-identical-expressions": true,
                    "no-identical-functions": true,
                    "no-ignored-initial-value": true,
                    "no-ignored-return": true,
                    "no-in-misuse": true,
                    "no-inferred-empty-object-type": true,
                    "no-invalid-await": true,
                    "no-invariant-return": true,
                    "no-inverted-boolean-check": true,
                    "no-let": true,
                    "no-method-signature": true,
                    "no-misleading-array-reverse": true,
                    "no-misspelled-operator": true,
                    "no-multiline-string-literals": true,
                    "no-nested-switch": true,
                    "no-nested-template-literals": true,
                    "no-object-mutation": true,
                    "no-redundant-boolean": true,
                    "no-redundant-jump": true,
                    "no-redundant-parentheses": true,
                    "no-return-type-any": true,
                    "no-same-line-conditional": true,
                    "no-self-assignment": true,
                    "no-statements-same-line": true,
                    "no-try-promise": true,
                    "no-tslint-disable-all": true,
                    "no-unconditional-jump": true,
                    "no-undefined-argument": true,
                    "no-unenclosed-multiline-block": true,
                    "no-unthrown-error": true,
                    "no-unused-array": true,
                    "no-use-of-empty-return-value": true,
                    "no-useless-cast": true,
                    "no-useless-catch": true,
                    "no-useless-increment": true,
                    "no-variable-usage-before-declaration": true,
                    "parameters-max-number": true,
                    "prefer-default-last": true,
                    "prefer-immediate-return": true,
                    "prefer-optional": true,
                    "prefer-promise-shorthand": true,
                    "prefer-type-guard": true,
                    "prettier": true,
                    "promise-must-complete": true,
                    "readonly-array": true,
                    "use-primitive-type": true,
                    "use-type-alias": true
                }
            }
        ],
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        "arrow-parens": [
            "off",
            "always"
        ],
        "brace-style": [
            "off",
            "off"
        ],
        "complexity": "off",
        "constructor-super": "error",
        "curly": "error",
        "eqeqeq": [
            "error",
            "smart"
        ],
        "guard-for-in": "error",
        "id-blacklist": [
            "error",
            "any",
            "Number",
            "number",
            "String",
            "string",
            "Boolean",
            "boolean",
            "Undefined",
            "undefined"
        ],
        "id-match": "error",
        "import/no-internal-modules": "off",
        "import/order": "error",
        "jsdoc/check-alignment": "error",
        "jsdoc/check-indentation": "error",
        "jsdoc/newline-after-description": "error",
        "max-classes-per-file": [
            "error",
            1
        ],
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": "error",
        "no-debugger": "error",
        "no-empty": "error",
        "no-eval": "error",
        "no-fallthrough": "off",
        "no-invalid-this": "error",
        "no-irregular-whitespace": "off",
        "no-new-wrappers": "error",
        "no-shadow": [
            "error",
            {
                "hoist": "all"
            }
        ],
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "error",
        "no-unsafe-finally": "error",
        "no-unused-labels": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "one-var": [
            "error",
            "never"
        ],
        "prefer-arrow/prefer-arrow-functions": "error",
        "prefer-const": "error",
        "radix": "error",
        "react/jsx-boolean-value": "error",
        "react/jsx-curly-spacing": [
            "error",
            {
                "when": "never"
            }
        ],
        "react/jsx-equals-spacing": [
            "error",
            "never"
        ],
        "react/jsx-key": "error",
        "react/jsx-no-bind": "error",
        "react/jsx-wrap-multilines": "off",
        "space-in-parens": [
            "off",
            "never"
        ],
        "spaced-comment": [
            "error",
            "always",
            {
                "markers": [
                    "/"
                ]
            }
        ],
        "use-isnan": "error",
        "valid-typeof": "off"
    }
};
